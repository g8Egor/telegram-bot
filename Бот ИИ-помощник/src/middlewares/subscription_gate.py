"""Middleware –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏ –∏ trial."""
from aiogram import BaseMiddleware
from aiogram.types import Message, CallbackQuery, InlineKeyboardButton, InlineKeyboardMarkup
from typing import Callable, Dict, Any, Awaitable
from datetime import datetime, date

from ..storage import db
from ..texts import texts
from ..config import config
from ..services import ux
from ..logger import get_logger

logger = get_logger("subscription_gate")


class SubscriptionGateMiddleware(BaseMiddleware):
    """Middleware –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏ –∏ trial –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    
    def __init__(self):
        # –ö–æ–º–∞–Ω–¥—ã, –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Ç–æ–ª—å–∫–æ —Å Pro –ø–æ–¥–ø–∏—Å–∫–æ–π
        self.pro_commands = {
            "üß© –¶–∏—Ñ—Ä–æ–≤–æ–µ –Ø",  # –¢–æ–ª—å–∫–æ Pro
            texts.BUTTON_REFLECT
        }
        
        # –ö–æ–º–∞–Ω–¥—ã —Å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è–º–∏ –¥–ª—è Free –ø–ª–∞–Ω–∞
        self.limited_commands = {
            "üéØ –§–æ–∫—É—Å-—Å–µ—Å—Å–∏—è",  # 1 —Å–µ—Å—Å–∏—è 25 –º–∏–Ω—É—Ç –≤ –¥–µ–Ω—å
            texts.BUTTON_FOCUS
        }
    
    async def __call__(
        self,
        handler: Callable[[Message, Dict[str, Any]], Awaitable[Any]],
        event: Message | CallbackQuery,
        data: Dict[str, Any]
    ) -> Any:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ø–æ–¥–ø–∏—Å–∫—É –∏ trial –ø–µ—Ä–µ–¥ –æ–±—Ä–∞–±–æ—Ç–∫–æ–π —Å–æ–æ–±—â–µ–Ω–∏—è."""
        
        # –ü–æ–ª—É—á–∞–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if isinstance(event, Message):
            user_id = event.from_user.id
            text = event.text
        elif isinstance(event, CallbackQuery):
            user_id = event.from_user.id
            text = event.data
        else:
            return await handler(event, data)
        
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user = await db.get_user(user_id)
        if not user:
            return await handler(event, data)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º trial –ø–µ—Ä–∏–æ–¥
        is_trial_active = user.trial_until and user.trial_until > datetime.now()
        is_pro_active = user.plan_tier == "pro" and user.subscription_until and user.subscription_until > datetime.now()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º Pro –∫–æ–º–∞–Ω–¥—ã (–¶–∏—Ñ—Ä–æ–≤–æ–µ –Ø)
        if text in self.pro_commands:
            if is_trial_active or is_pro_active:
                # –î–æ—Å—Ç—É–ø —Ä–∞–∑—Ä–µ—à–µ–Ω
                pass
            else:
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º paywall –¥–ª—è –¶–∏—Ñ—Ä–æ–≤–æ–≥–æ –Ø
                await self._show_digital_self_paywall(event)
                return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –¥–ª—è —Ñ–æ–∫—É—Å-—Å–µ—Å—Å–∏–π
        elif text in self.limited_commands:
            if is_trial_active or is_pro_active:
                # –ü–æ–ª–Ω—ã–π –¥–æ—Å—Ç—É–ø
                return await handler(event, data)
            else:
                # –û–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω—ã–π –¥–æ—Å—Ç—É–ø - —Ç–æ–ª—å–∫–æ 1 —Å–µ—Å—Å–∏—è 25 –º–∏–Ω—É—Ç –≤ –¥–µ–Ω—å
                if "focus" in text.lower() or "—Ñ–æ–∫—É—Å" in text.lower():
                    return await self._check_focus_limits(event, user_id)
        
        # –ï—Å–ª–∏ –≤—Å–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–æ–π–¥–µ–Ω—ã, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É
        return await handler(event, data)
    
    async def _show_digital_self_paywall(self, event):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç paywall –¥–ª—è –¶–∏—Ñ—Ä–æ–≤–æ–≥–æ –Ø."""
        title = ux.h1("–¶–∏—Ñ—Ä–æ–≤–æ–µ –Ø", "üß©")
        intro = ux.p("–¶–∏—Ñ—Ä–æ–≤–æ–µ –Ø –¥–æ—Å—Ç—É–ø–Ω–æ —Ç–æ–ª—å–∫–æ –≤ –ø–æ–¥–ø–∏—Å–∫–µ Pro.")
        features = [
            "üí≠ –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ –¥–∏–∞–ª–æ–≥–∏",
            "üß† –ê–Ω–∞–ª–∏–∑ –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø—Ä–æ—Ñ–∏–ª—è",
            "üí° –ö–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ —Å–æ–≤–µ—Ç—ã",
            "üìö –ü–∞–º—è—Ç—å –æ –≤–∞—à–∏—Ö —Ä–∞–∑–≥–æ–≤–æ—Ä–∞—Ö"
        ]
        body = ux.block("–í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏", features, "‚ú®")
        footer = ux.p("Pro ‚Äî 199 ‚ÇΩ/–º–µ—Å. 5 –¥–Ω–µ–π ‚Äî –±–µ—Å–ø–ª–∞—Ç–Ω–æ.")
        
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(
                text="–û—Ñ–æ—Ä–º–∏—Ç—å Pro –≤ Tribute", 
                url=config.tribute_product_url
            )],
            [InlineKeyboardButton(text="‚Ü©Ô∏è –í –º–µ–Ω—é", callback_data="nav:menu")]
        ])
        
        if isinstance(event, Message):
            await event.answer(
                ux.compose(title, intro, body, ux.hr(), footer),
                reply_markup=keyboard
            )
        else:
            await event.message.edit_text(
                ux.compose(title, intro, body, ux.hr(), footer),
                reply_markup=keyboard
            )
            await event.answer()
    
    async def _check_focus_limits(self, event, user_id):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ª–∏–º–∏—Ç—ã —Ñ–æ–∫—É—Å-—Å–µ—Å—Å–∏–π."""
        today = date.today().isoformat()
        
        async with db._connection.execute("""
            SELECT COUNT(*) FROM pomodoro 
            WHERE tg_id = ? AND DATE(started_at) = ?
        """, (user_id, today)) as cursor:
            sessions_count = (await cursor.fetchone())[0]
        
        if sessions_count >= 1:
            title = ux.h1("–õ–∏–º–∏—Ç —Ñ–æ–∫—É—Å-—Å–µ—Å—Å–∏–π", "‚è∞")
            intro = ux.p("–ë–µ—Å–ø–ª–∞—Ç–Ω—ã–π –ø–ª–∞–Ω: 1 —Å–µ—Å—Å–∏—è 25 –º–∏–Ω—É—Ç –≤ –¥–µ–Ω—å.")
            features = [
                "üéØ –ù–µ–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω—ã–µ —Å–µ—Å—Å–∏–∏",
                "‚è±Ô∏è –°–µ—Å—Å–∏–∏ 25 –∏ 45 –º–∏–Ω—É—Ç",
                "üìä –†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"
            ]
            body = ux.block("Pro –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏", features, "‚ú®")
            footer = ux.p("Pro ‚Äî 199 ‚ÇΩ/–º–µ—Å. 5 –¥–Ω–µ–π ‚Äî –±–µ—Å–ø–ª–∞—Ç–Ω–æ.")
            
            keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(
                    text="–û—Ñ–æ—Ä–º–∏—Ç—å Pro –≤ Tribute", 
                    url=config.tribute_product_url
                )],
                [InlineKeyboardButton(text="‚Ü©Ô∏è –í –º–µ–Ω—é", callback_data="nav:menu")]
            ])
            
            if isinstance(event, Message):
                await event.answer(
                    ux.compose(title, intro, body, ux.hr(), footer),
                    reply_markup=keyboard
                )
            else:
                await event.message.edit_text(
                    ux.compose(title, intro, body, ux.hr(), footer),
                    reply_markup=keyboard
                )
                await event.answer()
            return
        
        # –õ–∏–º–∏—Ç –Ω–µ –ø—Ä–µ–≤—ã—à–µ–Ω, —Ä–∞–∑—Ä–µ—à–∞–µ–º –¥–æ—Å—Ç—É–ø
        return True
