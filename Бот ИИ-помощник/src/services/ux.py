"""–ï–¥–∏–Ω—ã–π UX-—Ñ–æ—Ä–º–∞—Ç—Ç–µ—Ä –¥–ª—è –∫—Ä–∞—Å–∏–≤–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π."""
from __future__ import annotations

EM = "‚ÄÉ"  # U+2003 EM SPACE –¥–ª—è ¬´–∫—Ä–∞—Å–Ω–æ–π —Å—Ç—Ä–æ–∫–∏¬ª
SEP = "‚Äî" * 12

def h1(title: str, emoji: str = "üß†") -> str:
    return f"<b>{emoji} {escape(title)}</b>"

def h2(title: str, emoji: str = "‚ú®") -> str:
    return f"<b>{emoji} {escape(title)}</b>"

def p(text: str) -> str:
    # –∞–±–∑–∞—Ü —Å ¬´–∫—Ä–∞—Å–Ω–æ–π —Å—Ç—Ä–æ–∫–æ–π¬ª
    return f"{EM}{escape(text)}"

def ul(items: list[str], bullet: str = "‚Ä¢") -> str:
    lines = [f"{EM}{bullet} {escape(x)}" for x in items if x]
    return "\n".join(lines)

def code_inline(text: str) -> str:
    return f"<code>{escape(text)}</code>"

def hr() -> str:
    return f"<i>{SEP}</i>"

def block(title: str, items: list[str] | None = None, emoji: str = "üìå", footer: str | None = None) -> str:
    parts = [h2(title, emoji)]
    if items:
        parts.append(ul(items))
    if footer:
        parts += [hr(), p(footer)]
    return "\n".join(parts)

def compose(*parts: str) -> str:
    return "\n\n".join([x for x in parts if x and x.strip()])

def escape(s: str) -> str:
    # HTML-escape –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞ (–º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π)
    return (s or "").replace("&","&amp;").replace("<","&lt;").replace(">","&gt;")
