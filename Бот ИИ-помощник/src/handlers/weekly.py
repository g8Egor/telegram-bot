"""–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã—Ö –æ—Ç—á–µ—Ç–æ–≤."""
from aiogram import Router, F
from aiogram.types import Message, CallbackQuery
from aiogram.fsm.context import FSMContext

from ..texts import texts
from ..keyboards import kb_post_flow, get_main_menu
from ..storage import db
from ..services.reports import report_service
from ..services.pdf import pdf_service
from ..services import ux, flow
from ..logger import get_logger

logger = get_logger("weekly")
router = Router()


@router.message(F.text == texts.BUTTON_WEEKLY)
async def cmd_weekly(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–û—Ç—á—ë—Ç –Ω–µ–¥–µ–ª–∏'."""
    user_id = message.from_user.id
    user = await db.get_user(user_id)
    
    if not user:
        await message.answer(texts.ERROR_NOT_FOUND)
        return
    
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç
    report = await report_service.generate_weekly_report(user_id, user.persona)
    
    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç –∫—Ä–∞—Å–∏–≤–æ
    summary_lines = report.split("\n")
    
    pretty = ux.compose(
        ux.h1("–û—Ç—á—ë—Ç –Ω–µ–¥–µ–ª–∏", "üìä"),
        ux.block("–ö–æ—Ä–æ—Ç–∫–∏–π –æ–±–∑–æ—Ä", summary_lines, "üìÜ", footer="–ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –¥–µ—Ä–∂–∞—Ç—å —Ç–µ–º–ø!"),
        ux.hr()
    )
    
    await message.answer(pretty)
    
    # –î–æ–±–∞–≤–ª—è–µ–º finish-–∫–∞—Ä—Ç–æ—á–∫—É
    await message.answer(
        flow.finish_card(
            title=texts.FLOW_DONE_TITLE,
            intro="–û—Ç—á–µ—Ç –≥–æ—Ç–æ–≤! –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —Å–≤–æ–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è.",
            tips=["–≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–π –≤ PDF", "–ü–æ–¥–µ–ª–∏—Å—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏", "–í–µ—Ä–Ω–∏—Å—å –≤ –º–µ–Ω—é"],
            footer="–û—Ç–ª–∏—á–Ω–∞—è —Ä–∞–±–æ—Ç–∞ –Ω–∞ —ç—Ç–æ–π –Ω–µ–¥–µ–ª–µ!"
        ),
        reply_markup=kb_post_flow()
    )
    
    logger.info(f"Weekly report generated for user {user_id}")


@router.message(F.text == "/export_pdf")
async def cmd_export_pdf(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —ç–∫—Å–ø–æ—Ä—Ç–∞ PDF –æ—Ç—á–µ—Ç–∞."""
    user_id = message.from_user.id
    user = await db.get_user(user_id)
    
    if not user:
        await message.answer(texts.ERROR_NOT_FOUND)
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–ª–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –ø—Ä–æ–±–Ω—ã–π –ø–µ—Ä–∏–æ–¥
    from datetime import datetime
    if user.plan_tier != "ultimate":
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–æ–±–Ω—ã–π –ø–µ—Ä–∏–æ–¥
        if user.trial_until and user.trial_until > datetime.now():
            # –ü—Ä–æ–±–Ω—ã–π –ø–µ—Ä–∏–æ–¥ –∞–∫—Ç–∏–≤–µ–Ω - —Ä–∞–∑—Ä–µ—à–∞–µ–º PDF
            pass
        else:
            await message.answer(
                "‚ùå PDF –æ—Ç—á–µ—Ç—ã –¥–æ—Å—Ç—É–ø–Ω—ã —Ç–æ–ª—å–∫–æ –≤ —Ç–∞—Ä–∏—Ñ–µ Ultimate.\n\n"
                "–û–±–Ω–æ–≤–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏.",
                reply_markup=get_main_menu()
            )
            return
    
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º PDF
    try:
        pdf_path = await pdf_service.generate_weekly_pdf(
            user_id=user_id,
            user_name=message.from_user.first_name or "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"
        )
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª
        from aiogram.types import FSInputFile
        pdf_file = FSInputFile(pdf_path)
        
        await message.answer_document(
            document=pdf_file,
            caption="üìÑ –í–∞—à –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã–π PDF –æ—Ç—á–µ—Ç –≥–æ—Ç–æ–≤!"
        )
        
        # –î–æ–±–∞–≤–ª—è–µ–º finish-–∫–∞—Ä—Ç–æ—á–∫—É
        await message.answer(
            flow.finish_card(
                title="PDF –≥–æ—Ç–æ–≤",
                intro="–û—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ PDF —Ñ–æ—Ä–º–∞—Ç–µ.",
                tips=["–ü–æ–¥–µ–ª–∏—Å—å —Å –¥—Ä—É–∑—å—è–º–∏", "–°–æ—Ö—Ä–∞–Ω–∏ –≤ –æ–±–ª–∞–∫–æ", "–í–µ—Ä–Ω–∏—Å—å –≤ –º–µ–Ω—é"],
                footer="–û—Ç–ª–∏—á–Ω–∞—è —Ä–∞–±–æ—Ç–∞!"
            ),
            reply_markup=kb_post_flow()
        )
        
        logger.info(f"PDF report sent to user {user_id}")
        
    except Exception as e:
        logger.error(f"PDF generation error for user {user_id}: {e}")
        await message.answer(
            flow.finish_card(
                title="–û—à–∏–±–∫–∞",
                intro="–ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å PDF. –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ.",
                tips=["–ü—Ä–æ–≤–µ—Ä—å –∏–Ω—Ç–µ—Ä–Ω–µ—Ç", "–ü–æ–ø—Ä–æ–±—É–π —Å–Ω–æ–≤–∞", "–í–µ—Ä–Ω–∏—Å—å –≤ –º–µ–Ω—é"]
            ),
            reply_markup=kb_post_flow()
        )


@router.message(F.text == "/export_day")
async def cmd_export_day(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —ç–∫—Å–ø–æ—Ä—Ç–∞ –ø–ª–∞–Ω–∞ –¥–Ω—è."""
    user_id = message.from_user.id
    
    # –ü–æ–ª—É—á–∞–µ–º –∑–∞–ø–∏—Å–∏ –∑–∞ —Å–µ–≥–æ–¥–Ω—è
    from datetime import date
    today = date.today().isoformat()
    
    async with db._connection.execute("""
        SELECT type, data FROM entries 
        WHERE tg_id = ? AND date = ?
        ORDER BY created_at ASC
    """, (user_id, today)) as cursor:
        entries = await cursor.fetchall()
    
    if not entries:
        await message.answer(
            flow.finish_card(
                title="–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö",
                intro="–£ –≤–∞—Å –Ω–µ—Ç –∑–∞–ø–∏—Å–µ–π –∑–∞ —Å–µ–≥–æ–¥–Ω—è.",
                tips=["–ó–∞–ø–æ–ª–Ω–∏ —É—Ç—Ä–µ–Ω–Ω–∏–π –æ–ø—Ä–æ—Å", "–ó–∞–ø–æ–ª–Ω–∏ –≤–µ—á–µ—Ä–Ω–∏–π –æ–ø—Ä–æ—Å", "–í–µ—Ä–Ω–∏—Å—å –≤ –º–µ–Ω—é"],
                footer="–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –æ–ø—Ä–æ—Å—ã –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø–ª–∞–Ω–∞ –¥–Ω—è."
            ),
            reply_markup=kb_post_flow()
        )
        return
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º –ø–ª–∞–Ω –¥–Ω—è
    plan_text = "üìÖ –ü–ª–∞–Ω –¥–Ω—è:\n\n"
    
    for entry_type, data in entries:
        import json
        try:
            data_dict = json.loads(data)
            if entry_type == "morning":
                plan_text += f"üåÖ –£—Ç—Ä–µ–Ω–Ω–∏–π –ø–ª–∞–Ω:\n"
                plan_text += f"–¶–µ–ª—å: {data_dict.get('goal', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}\n"
                plan_text += f"–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç—ã: {', '.join(data_dict.get('top3', []))}\n"
                plan_text += f"–≠–Ω–µ—Ä–≥–∏—è: {data_dict.get('energy', 5)}/10\n\n"
            elif entry_type == "evening":
                plan_text += f"üåô –í–µ—á–µ—Ä–Ω—è—è —Ä–µ—Ñ–ª–µ–∫—Å–∏—è:\n"
                plan_text += f"–í—ã–ø–æ–ª–Ω–µ–Ω–æ: {', '.join(data_dict.get('done', []))}\n"
                plan_text += f"–ù–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ: {', '.join(data_dict.get('not_done', []))}\n"
                plan_text += f"–ò–∑—É—á–µ–Ω–æ: {data_dict.get('learning', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}\n\n"
        except json.JSONDecodeError:
            continue
    
    await message.answer(plan_text)
    
    # –î–æ–±–∞–≤–ª—è–µ–º finish-–∫–∞—Ä—Ç–æ—á–∫—É
    await message.answer(
        flow.finish_card(
            title="–ü–ª–∞–Ω –≥–æ—Ç–æ–≤",
            intro="–ü–ª–∞–Ω –¥–Ω—è —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω.",
            tips=["–°–æ—Ö—Ä–∞–Ω–∏ –≤ –∑–∞–º–µ—Ç–∫–∏", "–ü–æ–¥–µ–ª–∏—Å—å —Å –¥—Ä—É–∑—å—è–º–∏", "–í–µ—Ä–Ω–∏—Å—å –≤ –º–µ–Ω—é"],
            footer="–û—Ç–ª–∏—á–Ω–∞—è —Ä–∞–±–æ—Ç–∞!"
        ),
        reply_markup=kb_post_flow()
    )
    
    logger.info(f"Day plan exported for user {user_id}")


@router.message(F.text == "/export_week")
async def cmd_export_week(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —ç–∫—Å–ø–æ—Ä—Ç–∞ –∫–∞–ª–µ–Ω–¥–∞—Ä—è –Ω–µ–¥–µ–ª–∏."""
    user_id = message.from_user.id
    
    # –ü–æ–ª—É—á–∞–µ–º –∑–∞–ø–∏—Å–∏ –∑–∞ –Ω–µ–¥–µ–ª—é
    from datetime import datetime, timedelta
    week_ago = (datetime.now() - timedelta(days=7)).date()
    
    async with db._connection.execute("""
        SELECT date, type, data FROM entries 
        WHERE tg_id = ? AND date >= ?
        ORDER BY date ASC, created_at ASC
    """, (user_id, week_ago.isoformat())) as cursor:
        entries = await cursor.fetchall()
    
    if not entries:
        await message.answer(
            flow.finish_card(
                title="–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö",
                intro="–£ –≤–∞—Å –Ω–µ—Ç –∑–∞–ø–∏—Å–µ–π –∑–∞ –Ω–µ–¥–µ–ª—é.",
                tips=["–ó–∞–ø–æ–ª–Ω–∏ –æ–ø—Ä–æ—Å—ã", "–í–µ—Ä–Ω–∏—Å—å –≤ –º–µ–Ω—é"],
                footer="–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –æ–ø—Ä–æ—Å—ã –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–∞–ª–µ–Ω–¥–∞—Ä—è –Ω–µ–¥–µ–ª–∏."
            ),
            reply_markup=kb_post_flow()
        )
        return
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–∞–ª–µ–Ω–¥–∞—Ä—å –Ω–µ–¥–µ–ª–∏
    calendar_text = "üìÖ –ö–∞–ª–µ–Ω–¥–∞—Ä—å –Ω–µ–¥–µ–ª–∏:\n\n"
    
    current_date = None
    for date_str, entry_type, data in entries:
        if current_date != date_str:
            current_date = date_str
            calendar_text += f"üìÖ {date_str}:\n"
        
        import json
        try:
            data_dict = json.loads(data)
            if entry_type == "morning":
                calendar_text += f"  üåÖ –¶–µ–ª—å: {data_dict.get('goal', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}\n"
            elif entry_type == "evening":
                calendar_text += f"  üåô –í—ã–ø–æ–ª–Ω–µ–Ω–æ: {len(data_dict.get('done', []))} –∑–∞–¥–∞—á\n"
        except json.JSONDecodeError:
            continue
    
    await message.answer(calendar_text)
    
    # –î–æ–±–∞–≤–ª—è–µ–º finish-–∫–∞—Ä—Ç–æ—á–∫—É
    await message.answer(
        flow.finish_card(
            title="–ö–∞–ª–µ–Ω–¥–∞—Ä—å –≥–æ—Ç–æ–≤",
            intro="–ö–∞–ª–µ–Ω–¥–∞—Ä—å –Ω–µ–¥–µ–ª–∏ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω.",
            tips=["–°–æ—Ö—Ä–∞–Ω–∏ –≤ –∑–∞–º–µ—Ç–∫–∏", "–ü–æ–¥–µ–ª–∏—Å—å —Å –¥—Ä—É–∑—å—è–º–∏", "–í–µ—Ä–Ω–∏—Å—å –≤ –º–µ–Ω—é"],
            footer="–û—Ç–ª–∏—á–Ω–∞—è —Ä–∞–±–æ—Ç–∞!"
        ),
        reply_markup=kb_post_flow()
    )
    
    logger.info(f"Week calendar exported for user {user_id}")


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –∫–Ω–æ–ø–æ–∫ –≤ kb_post_flow
@router.callback_query(F.data == "focus:open")
async def process_focus_from_weekly(callback: CallbackQuery, state: FSMContext):
    """–ü–µ—Ä–µ—Ö–æ–¥ –∫ —Ñ–æ–∫—É—Å-—Å–µ—Å—Å–∏–∏ –∏–∑ –æ—Ç—á–µ—Ç–∞."""
    from .focus import focus_start
    await focus_start(callback.message, state)
    await callback.answer()


@router.callback_query(F.data == "nav:stats")
async def process_stats_from_weekly(callback: CallbackQuery, state: FSMContext):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –¥–Ω—è –∏–∑ –æ—Ç—á–µ—Ç–∞."""
    user_id = callback.from_user.id
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∑–∞ —Å–µ–≥–æ–¥–Ω—è
    from datetime import datetime
    today = datetime.now().strftime("%Y-%m-%d")
    
    # –ü–æ–ª—É—á–∞–µ–º –∑–∞–ø–∏—Å–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è
    async with db._connection.execute("""
        SELECT energy, mood, note FROM mood WHERE tg_id = ? AND date = ?
    """, (user_id, today)) as cursor:
        mood_data = await cursor.fetchone()
    
    # –ü–æ–ª—É—á–∞–µ–º —Ñ–æ–∫—É—Å-—Å–µ—Å—Å–∏–∏
    async with db._connection.execute("""
        SELECT COUNT(*), SUM(duration) FROM pomodoro 
        WHERE tg_id = ? AND DATE(started_at) = ?
    """, (user_id, today)) as cursor:
        focus_data = await cursor.fetchone()
    
    # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–∏–≤—ã—á–∫–∏
    async with db._connection.execute("""
        SELECT COUNT(*) FROM habits WHERE tg_id = ?
    """, (user_id,)) as cursor:
        habits_count = await cursor.fetchone()
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    stats_parts = []
    
    if mood_data:
        stats_parts.append(f"–≠–Ω–µ—Ä–≥–∏—è: {mood_data[0]}/10")
        stats_parts.append(f"–ù–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ: {mood_data[1]}/10")
        if mood_data[2]:
            stats_parts.append(f"–ó–∞–º–µ—Ç–∫–∞: {mood_data[2][:50]}...")
    
    if focus_data and focus_data[0] > 0:
        stats_parts.append(f"–§–æ–∫—É—Å-—Å–µ—Å—Å–∏–π: {focus_data[0]}")
        stats_parts.append(f"–í—Ä–µ–º—è —Ñ–æ–∫—É—Å–∞: {focus_data[1] or 0} –º–∏–Ω")
    
    if habits_count and habits_count[0] > 0:
        stats_parts.append(f"–ü—Ä–∏–≤—ã—á–µ–∫: {habits_count[0]}")
    
    if not stats_parts:
        stats_text = "–ü–æ–∫–∞ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –∑–∞ —Å–µ–≥–æ–¥–Ω—è"
    else:
        stats_text = "\n".join(stats_parts)
    
    await callback.message.edit_text(
        ux.compose(
            ux.h1("–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–Ω—è", "üìä"),
            ux.p(stats_text)
        ),
        reply_markup=kb_post_flow()
    )
    await callback.answer()
