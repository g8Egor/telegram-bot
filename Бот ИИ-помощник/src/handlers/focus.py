"""–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Ñ–æ–∫—É—Å-—Å–µ—Å—Å–∏–π."""
import asyncio
from aiogram import Router, F
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.fsm.context import FSMContext
from datetime import datetime, timedelta

from ..states import Focus
from ..texts import texts
from ..keyboards import kb_focus_duration, kb_focus_controls, kb_focus_reflection, kb_post_flow, get_main_menu
from .. import storage
from ..services import ux, flow
from ..logger import get_logger

logger = get_logger("focus")
router = Router()

# –•—Ä–∞–Ω–∏–ª–∏—â–µ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–µ—Å—Å–∏–π
active_sessions = {}

async def start_focus_timer(user_id: int, duration: int, message):
    """–ó–∞–ø—É—Å–∫ —Ç–∞–π–º–µ—Ä–∞ —Ñ–æ–∫—É—Å-—Å–µ—Å—Å–∏–∏."""
    import asyncio
    from datetime import datetime, timedelta
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º –≤—Ä–µ–º—è –æ–∫–æ–Ω—á–∞–Ω–∏—è
    if user_id in active_sessions and 'end_time' in active_sessions[user_id]:
        end_time = active_sessions[user_id]['end_time']
    else:
        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–µ –≤—Ä–µ–º—è –æ–∫–æ–Ω—á–∞–Ω–∏—è
        start_time = datetime.now()
        end_time = start_time + timedelta(minutes=duration)
        if user_id in active_sessions:
            active_sessions[user_id]['end_time'] = end_time
    
    last_time_str = ""
    
    # –û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª —Ç–∞–π–º–µ—Ä–∞
    while user_id in active_sessions and active_sessions[user_id].get("status") == "running":
        now = datetime.now()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∏—Å—Ç–µ–∫–ª–æ –ª–∏ –≤—Ä–µ–º—è
        if now >= end_time:
            await complete_focus_session(user_id, message)
            break
        
        # –í—ã—á–∏—Å–ª—è–µ–º –æ—Å—Ç–∞–≤—à–µ–µ—Å—è –≤—Ä–µ–º—è
        remaining = end_time - now
        minutes = int(remaining.total_seconds() // 60)
        seconds = int(remaining.total_seconds() % 60)
        current_time_str = f"{minutes:02d}:{seconds:02d}"
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –≤—Ä–µ–º—è –∏–∑–º–µ–Ω–∏–ª–æ—Å—å
        if current_time_str != last_time_str:
            try:
                await message.edit_text(
                    ux.compose(
                        ux.h1("–§–æ–∫—É—Å-—Å–µ—Å—Å–∏—è", "üéØ"),
                        ux.p(f"–ó–∞–¥–∞—á–∞: {active_sessions[user_id].get('task', '–ù–µ —É–∫–∞–∑–∞–Ω–∞')}"),
                        ux.p(f"‚è∞ –û—Å—Ç–∞–ª–æ—Å—å: {current_time_str}"),
                        ux.p("–°–æ—Å—Ä–µ–¥–æ—Ç–æ—á—å—Å—è –Ω–∞ –∑–∞–¥–∞—á–µ!")
                    ),
                    reply_markup=kb_focus_controls()
                )
                last_time_str = current_time_str
            except Exception as e:
                logger.error(f"Error updating timer: {e}")
                # –ï—Å–ª–∏ –æ—à–∏–±–∫–∞, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –±–µ–∑ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è
                pass
        
        await asyncio.sleep(1)  # –û–±–Ω–æ–≤–ª—è–µ–º –∫–∞–∂–¥—É—é —Å–µ–∫—É–Ω–¥—É

async def complete_focus_session(user_id: int, message):
    """–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ñ–æ–∫—É—Å-—Å–µ—Å—Å–∏–∏."""
    if user_id in active_sessions:
        session = active_sessions[user_id]
        actual_duration = (datetime.now() - session['started_at']).total_seconds() / 60
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ë–î
        await storage.db.log_pomodoro(
            tg_id=user_id,
            started_at=session['started_at'],
            finished_at=datetime.now(),
            duration=int(actual_duration),
            status="completed"
        )
        
        # –£–¥–∞–ª—è–µ–º –∏–∑ –∞–∫—Ç–∏–≤–Ω—ã—Ö
        del active_sessions[user_id]
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        await message.edit_text(
            ux.compose(
                ux.h1("–§–æ–∫—É—Å-—Å–µ—Å—Å–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!", "‚úÖ"),
                ux.p(f"–û—Ç–ª–∏—á–Ω–æ! –¢—ã —Å—Ñ–æ–∫—É—Å–∏—Ä–æ–≤–∞–ª—Å—è {int(actual_duration)} –º–∏–Ω—É—Ç."),
                ux.p("–í—Ä–µ–º—è –¥–ª—è –∫–æ—Ä–æ—Ç–∫–æ–≥–æ –ø–µ—Ä–µ—Ä—ã–≤–∞!")
            )
        )


@router.message(F.text.in_({"üéØ –§–æ–∫—É—Å-—Å–µ—Å—Å–∏—è", "/focus"}))
@router.callback_query(F.data == "focus:open")
async def focus_start(msg_or_callback, state: FSMContext):
    """–ù–∞—á–∞–ª–æ —Ñ–æ–∫—É—Å-—Å–µ—Å—Å–∏–∏."""
    logger.info(f"Focus session handler triggered by user {msg_or_callback.from_user.id if hasattr(msg_or_callback, 'from_user') else 'unknown'}")
    logger.info(f"Message type: {type(msg_or_callback)}")
    logger.info(f"Message text: {getattr(msg_or_callback, 'text', 'N/A')}")
    await state.set_state(Focus.selecting)
    
    try:
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –Ω–∞–ø—Ä—è–º—É—é
        keyboard = InlineKeyboardMarkup(
            inline_keyboard=[
                [InlineKeyboardButton(text="üçÖ 25 –º–∏–Ω—É—Ç", callback_data="focus:start:25")],
                [InlineKeyboardButton(text="üî• 45 –º–∏–Ω—É—Ç", callback_data="focus:start:45")],
                [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="focus:cancel")]
            ]
        )
        
        if isinstance(msg_or_callback, Message):
            await msg_or_callback.answer(
                ux.compose(
                    ux.h1("–§–æ–∫—É—Å-—Å–µ—Å—Å–∏—è", "üéØ"),
                    ux.p("–í—ã–±–µ—Ä–∏ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Å–µ—Å—Å–∏–∏:")
                ),
                reply_markup=keyboard
            )
        else:
            await msg_or_callback.message.edit_text(
                ux.compose(
                    ux.h1("–§–æ–∫—É—Å-—Å–µ—Å—Å–∏—è", "üéØ"),
                    ux.p("–í—ã–±–µ—Ä–∏ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Å–µ—Å—Å–∏–∏:")
                ),
                reply_markup=keyboard
            )
            await msg_or_callback.answer()
        logger.info("Focus session interface sent successfully")
    except Exception as e:
        logger.error(f"Error in focus_start: {e}")
        if isinstance(msg_or_callback, Message):
            await msg_or_callback.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ —Ñ–æ–∫—É—Å-—Å–µ—Å—Å–∏–∏")
        else:
            await msg_or_callback.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ —Ñ–æ–∫—É—Å-—Å–µ—Å—Å–∏–∏")


@router.callback_query(F.data.startswith("focus:start:"))
async def process_focus_start(callback: CallbackQuery, state: FSMContext):
    """–ù–∞—á–∞–ª–æ —Ñ–æ–∫—É—Å-—Å–µ—Å—Å–∏–∏."""
    logger.info(f"Focus start callback received: {callback.data} from user {callback.from_user.id}")
    try:
        duration = int(callback.data.split(":")[2])
        logger.info(f"Focus session duration selected: {duration} minutes for user {callback.from_user.id}")
        
        await state.update_data(duration=duration)
        await state.set_state(Focus.task)
        
        await callback.message.edit_text(
            ux.compose(
                ux.h1("–§–æ–∫—É—Å-—Å–µ—Å—Å–∏—è", "üéØ"),
                ux.p(f"–í—ã–±—Ä–∞–Ω–æ: {duration} –º–∏–Ω—É—Ç"),
                ux.p("–û–ø–∏—à–∏ –∑–∞–¥–∞—á—É, –Ω–∞–¥ –∫–æ—Ç–æ—Ä–æ–π –±—É–¥–µ—à—å —Ä–∞–±–æ—Ç–∞—Ç—å:")
            )
        )
        await callback.answer()
        logger.info("Focus session task prompt sent successfully")
    except Exception as e:
        logger.error(f"Error in process_focus_start: {e}")
        await callback.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ —Ñ–æ–∫—É—Å-—Å–µ—Å—Å–∏–∏")


@router.callback_query(F.data == "focus:cancel")
async def focus_cancel(callback: CallbackQuery, state: FSMContext):
    """–û—Ç–º–µ–Ω–∞ —Ñ–æ–∫—É—Å-—Å–µ—Å—Å–∏–∏."""
    await state.clear()
    await callback.message.edit_text(
        ux.compose(
            ux.h1("–û—Ç–º–µ–Ω–µ–Ω–æ", "‚ùå"),
            ux.p("–§–æ–∫—É—Å-—Å–µ—Å—Å–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞. –ì–æ—Ç–æ–≤ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å, –∫–æ–≥–¥–∞ –±—É–¥–µ—à—å –≥–æ—Ç–æ–≤.")
        )
    )
    await callback.answer()


@router.message(Focus.task)
async def process_focus_task(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–¥–∞—á–∏ –¥–ª—è —Ñ–æ–∫—É—Å-—Å–µ—Å—Å–∏–∏."""
    task = message.text
    await state.update_data(task=task)
    await state.set_state(Focus.running)
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–µ—Å—Å–∏—é –∫–∞–∫ –∞–∫—Ç–∏–≤–Ω—É—é
    user_id = message.from_user.id
    data = await state.get_data()
    duration = data.get('duration', 25)
    
    active_sessions[user_id] = {
        'started_at': datetime.now(),
        'duration': duration,
        'task': task,
        'status': 'running'
    }
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ç–∞–π–º–µ—Ä–æ–º
    timer_msg = await message.answer(
        ux.compose(
            ux.h1("–§–æ–∫—É—Å-—Å–µ—Å—Å–∏—è", "üéØ"),
            ux.p(f"–ó–∞–¥–∞—á–∞: {task}"),
            ux.p(f"‚è∞ –û—Å—Ç–∞–ª–æ—Å—å: {duration:02d}:00"),
            ux.p("–°–æ—Å—Ä–µ–¥–æ—Ç–æ—á—å—Å—è –Ω–∞ –∑–∞–¥–∞—á–µ!")
        ),
        reply_markup=kb_focus_controls()
    )
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–∞–π–º–µ—Ä –≤ —Ñ–æ–Ω–µ
    import asyncio
    asyncio.create_task(start_focus_timer(user_id, duration, timer_msg))


@router.callback_query(F.data == "focus:pause")
async def process_focus_pause(callback: CallbackQuery, state: FSMContext):
    """–ü–∞—É–∑–∞ —Ñ–æ–∫—É—Å-—Å–µ—Å—Å–∏–∏."""
    user_id = callback.from_user.id
    if user_id in active_sessions:
        active_sessions[user_id]['status'] = 'paused'
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Å—Ç–∞–≤—à–µ–µ—Å—è –≤—Ä–µ–º—è
        session = active_sessions[user_id]
        if 'end_time' in session:
            session['paused_at'] = datetime.now()
            session['remaining_on_pause'] = session['end_time'] - session['paused_at']
        
        await callback.message.edit_text(
            ux.compose(
                ux.h1("–§–æ–∫—É—Å-—Å–µ—Å—Å–∏—è", "‚è∏Ô∏è"),
                ux.p("–°–µ—Å—Å–∏—è –Ω–∞ –ø–∞—É–∑–µ. –ù–∞–∂–º–∏ '–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å' –∫–æ–≥–¥–∞ –±—É–¥–µ—à—å –≥–æ—Ç–æ–≤.")
            ),
            reply_markup=InlineKeyboardMarkup(
                inline_keyboard=[
                    [InlineKeyboardButton(text="‚ñ∂Ô∏è –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å", callback_data="focus:resume")],
                    [InlineKeyboardButton(text="‚úÖ –ì–æ—Ç–æ–≤–æ", callback_data="focus:done")]
                ]
            )
        )
    await callback.answer()


@router.callback_query(F.data == "focus:resume")
async def process_focus_resume(callback: CallbackQuery, state: FSMContext):
    """–ü—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ —Ñ–æ–∫—É—Å-—Å–µ—Å—Å–∏–∏."""
    user_id = callback.from_user.id
    if user_id in active_sessions:
        session = active_sessions[user_id]
        
        # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—Ä–µ–º—è –æ–∫–æ–Ω—á–∞–Ω–∏—è
        if 'paused_at' in session and 'remaining_on_pause' in session:
            session['end_time'] = datetime.now() + session['remaining_on_pause']
            del session['paused_at']
            del session['remaining_on_pause']
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å "running"
        session['status'] = 'running'
        
        duration = session.get('duration', 25)
        task = session.get('task', '–ù–µ —É–∫–∞–∑–∞–Ω–∞')
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–µ–∫—É—â–µ–µ –æ—Å—Ç–∞–≤—à–µ–µ—Å—è –≤—Ä–µ–º—è
        if 'end_time' in session:
            now = datetime.now()
            remaining = session['end_time'] - now
            minutes = int(remaining.total_seconds() // 60)
            seconds = int(remaining.total_seconds() % 60)
            time_str = f"{minutes:02d}:{seconds:02d}"
        else:
            time_str = f"{duration:02d}:00"
        
        await callback.message.edit_text(
            ux.compose(
                ux.h1("–§–æ–∫—É—Å-—Å–µ—Å—Å–∏—è", "üéØ"),
                ux.p(f"–ó–∞–¥–∞—á–∞: {task}"),
                ux.p(f"‚è∞ –û—Å—Ç–∞–ª–æ—Å—å: {time_str}"),
                ux.p("–°–æ—Å—Ä–µ–¥–æ—Ç–æ—á—å—Å—è –Ω–∞ –∑–∞–¥–∞—á–µ!")
            ),
            reply_markup=kb_focus_controls()
        )
        
        # –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ–º —Ç–∞–π–º–µ—Ä
        import asyncio
        asyncio.create_task(start_focus_timer(user_id, duration, callback.message))
    await callback.answer()


@router.callback_query(F.data == "focus:stop")
async def process_focus_stop(callback: CallbackQuery, state: FSMContext):
    """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ñ–æ–∫—É—Å-—Å–µ—Å—Å–∏–∏."""
    user_id = callback.from_user.id
    if user_id in active_sessions:
        session = active_sessions[user_id]
        duration = (datetime.now() - session['started_at']).total_seconds() / 60
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–µ—Å—Å–∏—é –≤ –ë–î
        await db.log_pomodoro(
            tg_id=user_id,
            duration=int(duration),
            status="stopped"
        )
        
        del active_sessions[user_id]
    
    # –°–æ–æ–±—â–µ–Ω–∏–µ –ê (—Ñ–∏–Ω–∞–ª –±–µ–∑ –∫–Ω–æ–ø–æ–∫)
    await callback.message.edit_text(
        ux.compose(
            ux.h1("–§–æ–∫—É—Å-—Å–µ—Å—Å–∏—è", "‚èπÔ∏è"),
            ux.p("–°–µ—Å—Å–∏—è –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞. –•–æ—Ä–æ—à–∞—è —Ä–∞–±–æ—Ç–∞!")
        )
    )
    
    
    await state.clear()
    await callback.answer()


@router.callback_query(F.data == "focus:done")
async def process_focus_done(callback: CallbackQuery, state: FSMContext):
    """–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ñ–æ–∫—É—Å-—Å–µ—Å—Å–∏–∏."""
    user_id = callback.from_user.id
    data = await state.get_data()
    duration = data.get('duration', 25)
    
    if user_id in active_sessions:
        session = active_sessions[user_id]
        actual_duration = (datetime.now() - session['started_at']).total_seconds() / 60
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–µ—Å—Å–∏—é –≤ –ë–î
        await storage.db.log_pomodoro(
            tg_id=user_id,
            started_at=session['started_at'],
            finished_at=datetime.now(),
            duration=int(actual_duration),
            status="completed"
        )
        
        del active_sessions[user_id]
    
    # –°–æ–æ–±—â–µ–Ω–∏–µ –ê (—Ñ–∏–Ω–∞–ª –±–µ–∑ –∫–Ω–æ–ø–æ–∫)
    await callback.message.edit_text(
        ux.compose(
            ux.h1("–§–æ–∫—É—Å-—Å–µ—Å—Å–∏—è", "‚úÖ"),
            ux.p(f"–û—Ç–ª–∏—á–Ω–æ! {duration} –º–∏–Ω—É—Ç —Ñ–æ–∫—É—Å–∞ –∑–∞–≤–µ—Ä—à–µ–Ω—ã.")
        )
    )
    
    
    await state.clear()
    await callback.answer()


@router.callback_query(F.data == "focus:cancel")
async def process_focus_cancel(callback: CallbackQuery, state: FSMContext):
    """–û—Ç–º–µ–Ω–∞ —Ñ–æ–∫—É—Å-—Å–µ—Å—Å–∏–∏."""
    user_id = callback.from_user.id
    if user_id in active_sessions:
        del active_sessions[user_id]
    
    await state.clear()
    await callback.message.edit_text(
        ux.compose(
            ux.h1("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", "üè†"),
            ux.p("–í—ã–±–µ—Ä–∏ —Ä–∞–∑–¥–µ–ª:")
        ),
        reply_markup=get_main_menu()
    )
    await callback.answer()