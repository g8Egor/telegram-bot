"""–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –≤–µ—á–µ—Ä–Ω–µ–≥–æ –æ–ø—Ä–æ—Å–∞."""
from aiogram import Router, F
from aiogram.types import Message, CallbackQuery
from aiogram.fsm.context import FSMContext

from ..states import Evening
from ..texts import texts
from ..keyboards import get_main_menu, kb_evening_done, kb_evening_not_done, kb_evening_learning, kb_post_flow
from ..storage import db
from ..services.gpt import gpt_service
from ..services.memories import memory_service
from ..services.emotion import emotion_service
from ..services import ux, flow
from ..logger import get_logger

logger = get_logger("evening")
router = Router()


# Callback –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –∫–Ω–æ–ø–æ—á–Ω–æ–≥–æ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
@router.callback_query(F.data.startswith("evening:done:"))
async def process_evening_done_callback(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫–∏."""
    done_idx = callback.data.split(":")[2]
    
    if done_idx == "custom":
        await callback.message.edit_text(
            ux.compose(
                ux.h1("–í–µ—á–µ—Ä–Ω–∏–µ –∏—Ç–æ–≥–∏", "üåô"),
                ux.p("–ß—Ç–æ —É–¥–∞–ª–æ—Å—å —Å–¥–µ–ª–∞—Ç—å —Å–µ–≥–æ–¥–Ω—è? (—á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é):")
            )
        )
        await state.set_state(Evening.done_text)
    else:
        # –í—ã–±–∏—Ä–∞–µ–º –∏–∑ –ø—Ä–µ—Å–µ—Ç–æ–≤
        done = texts.EVENING_DONE_PRESETS[int(done_idx)]
        await state.update_data(done=[done])
        await callback.message.edit_text(
            ux.compose(
                ux.h1("–í–µ—á–µ—Ä–Ω–∏–µ –∏—Ç–æ–≥–∏", "üåô"),
                ux.p("–ß—Ç–æ –Ω–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å?")
            ),
            reply_markup=kb_evening_not_done()
        )
        await state.set_state(Evening.not_done)
    
    await callback.answer()


@router.message(Evening.done_text)
async def process_evening_done_text(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –≤–≤–æ–¥–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á."""
    done_tasks = [task.strip() for task in message.text.replace('\n', ',').split(',') if task.strip()]
    await state.update_data(done=done_tasks)
    await message.answer(
        ux.compose(
            ux.h1("–í–µ—á–µ—Ä–Ω–∏–µ –∏—Ç–æ–≥–∏", "üåô"),
            ux.p("–ß—Ç–æ –Ω–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å?")
        ),
        reply_markup=kb_evening_not_done()
    )
    await state.set_state(Evening.not_done)


@router.message(Evening.done)
async def process_evening_done(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏."""
    # –ü–∞—Ä—Å–∏–º —Å–ø–∏—Å–æ–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á
    done_tasks = [task.strip() for task in message.text.replace('\n', ',').split(',') if task.strip()]
    await state.update_data(done=done_tasks)
    
    await message.answer(texts.EVENING_NOT_DONE)
    await state.set_state(Evening.not_done)


# Callback –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –Ω–µ–≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á
@router.callback_query(F.data.startswith("evening:not_done:"))
async def process_evening_not_done_callback(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –Ω–µ–≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫–∏."""
    not_done_idx = callback.data.split(":")[2]
    
    if not_done_idx == "custom":
        await callback.message.edit_text(
            ux.compose(
                ux.h1("–í–µ—á–µ—Ä–Ω–∏–µ –∏—Ç–æ–≥–∏", "üåô"),
                ux.p("–ß—Ç–æ –Ω–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å? (—á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é):")
            )
        )
        await state.set_state(Evening.not_done_text)
    else:
        # –í—ã–±–∏—Ä–∞–µ–º –∏–∑ –ø—Ä–µ—Å–µ—Ç–æ–≤
        not_done = texts.EVENING_NOT_DONE_PRESETS[int(not_done_idx)]
        await state.update_data(not_done=[not_done])
        await callback.message.edit_text(
            ux.compose(
                ux.h1("–í–µ—á–µ—Ä–Ω–∏–µ –∏—Ç–æ–≥–∏", "üåô"),
                ux.p("–ß–µ–º—É –Ω–∞—É—á–∏–ª—Å—è —Å–µ–≥–æ–¥–Ω—è?")
            ),
            reply_markup=kb_evening_learning()
        )
        await state.set_state(Evening.learning)
    
    await callback.answer()


@router.message(Evening.not_done_text)
async def process_evening_not_done_text(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –≤–≤–æ–¥–∞ –Ω–µ–≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á."""
    not_done_tasks = [task.strip() for task in message.text.replace('\n', ',').split(',') if task.strip()]
    await state.update_data(not_done=not_done_tasks)
    await message.answer(
        ux.compose(
            ux.h1("–í–µ—á–µ—Ä–Ω–∏–µ –∏—Ç–æ–≥–∏", "üåô"),
            ux.p("–ß–µ–º—É –Ω–∞—É—á–∏–ª—Å—è —Å–µ–≥–æ–¥–Ω—è?")
        ),
        reply_markup=kb_evening_learning()
    )
    await state.set_state(Evening.learning)


@router.message(Evening.not_done)
async def process_evening_not_done(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–µ–≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏."""
    # –ü–∞—Ä—Å–∏–º —Å–ø–∏—Å–æ–∫ –Ω–µ–≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á
    not_done_tasks = [task.strip() for task in message.text.replace('\n', ',').split(',') if task.strip()]
    await state.update_data(not_done=not_done_tasks)
    
    await message.answer(texts.EVENING_LEARNING)
    await state.set_state(Evening.learning)


# Callback –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –æ–±—É—á–µ–Ω–∏—è
@router.callback_query(F.data.startswith("evening:learning:"))
async def process_evening_learning_callback(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –æ–±—É—á–µ–Ω–∏—è —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫–∏."""
    learning_idx = callback.data.split(":")[2]
    
    if learning_idx == "custom":
        await callback.message.edit_text(
            ux.compose(
                ux.h1("–í–µ—á–µ—Ä–Ω–∏–µ –∏—Ç–æ–≥–∏", "üåô"),
                ux.p("–ß–µ–º—É –Ω–∞—É—á–∏–ª—Å—è —Å–µ–≥–æ–¥–Ω—è? (—Å–≤–æ–π –≤–∞—Ä–∏–∞–Ω—Ç):")
            )
        )
        await state.set_state(Evening.learning_text)
    else:
        # –í—ã–±–∏—Ä–∞–µ–º –∏–∑ –ø—Ä–µ—Å–µ—Ç–æ–≤
        learning = texts.EVENING_LEARNING_PRESETS[int(learning_idx)]
        await state.update_data(learning=learning)
        
        # –ó–∞–≤–µ—Ä—à–∞–µ–º –≤–µ—á–µ—Ä–Ω–∏–π –æ–ø—Ä–æ—Å
        await finish_evening_flow(callback, state)
    
    await callback.answer()


@router.message(Evening.learning_text)
async def process_evening_learning_text(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –≤–≤–æ–¥–∞ –æ–±—É—á–µ–Ω–∏—è."""
    learning = message.text
    await state.update_data(learning=learning)
    
    # –ó–∞–≤–µ—Ä—à–∞–µ–º –≤–µ—á–µ—Ä–Ω–∏–π –æ–ø—Ä–æ—Å
    await finish_evening_flow(message, state)


@router.message(Evening.learning)
async def process_evening_learning(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∏–∑—É—á–µ–Ω–Ω–æ–µ –∑–∞ –¥–µ–Ω—å."""
    learning = message.text
    await state.update_data(learning=learning)
    
    # –ó–∞–≤–µ—Ä—à–∞–µ–º –≤–µ—á–µ—Ä–Ω–∏–π –æ–ø—Ä–æ—Å
    await finish_evening_flow(message, state)


async def finish_evening_flow(message_or_callback, state: FSMContext):
    """–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –≤–µ—á–µ—Ä–Ω–µ–≥–æ –ø–æ—Ç–æ–∫–∞."""
    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ
    data = await state.get_data()
    
    # –ü–æ–ª—É—á–∞–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if isinstance(message_or_callback, Message):
        user_id = message_or_callback.from_user.id
    else:
        user_id = message_or_callback.from_user.id
    
    # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –µ–≥–æ –ø–µ—Ä—Å–æ–Ω—É
    user = await db.get_user(user_id)
    if not user:
        if isinstance(message_or_callback, Message):
            await message_or_callback.answer(texts.ERROR_NOT_FOUND)
        else:
            await message_or_callback.message.edit_text(texts.ERROR_NOT_FOUND)
        return
    
    # –ü–æ–ª—É—á–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –∏–∑ –ø–∞–º—è—Ç–∏
    memories = await memory_service.get_recent_memories(user_id, 3)
    
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ä–µ—Ñ–ª–µ–∫—Å–∏—é —á–µ—Ä–µ–∑ GPT
    reflection = await gpt_service.reflect_evening(
        done=data.get('done', []),
        not_done=data.get('not_done', []),
        learning=data.get('learning', ''),
        persona=user.persona,
        memories=memories
    )
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞–ø–∏—Å—å –≤ –ë–î
    await db.save_entry(
        tg_id=user_id,
        entry_type="evening",
        data={
            "done": data.get('done', []),
            "not_done": data.get('not_done', []),
            "learning": data.get('learning', '')
        }
    )
    
    # –î–æ–±–∞–≤–ª—è–µ–º –≤ –ø–∞–º—è—Ç—å
    await memory_service.add_memory(
        tg_id=user_id,
        kind="evening",
        content=f"–í–µ—á–µ—Ä–Ω—è—è —Ä–µ—Ñ–ª–µ–∫—Å–∏—è: –≤—ã–ø–æ–ª–Ω–µ–Ω–æ {len(data.get('done', []))}, –Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ {len(data.get('not_done', []))}"
    )
    
    # –°–æ–æ–±—â–µ–Ω–∏–µ –ê (—Ñ–∏–Ω–∞–ª –±–µ–∑ –∫–Ω–æ–ø–æ–∫)
    if isinstance(message_or_callback, Message):
        await message_or_callback.answer(
            ux.compose(
                ux.h1("–ì–æ—Ç–æ–≤–æ", "‚úÖ"),
                ux.p("–ò—Ç–æ–≥–∏ –¥–Ω—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã! –Ø –≤—Å—ë –∑–∞–ø–æ–º–Ω–∏–ª.")
            )
        )
    else:
        await message_or_callback.message.edit_text(
            ux.compose(
                ux.h1("–ì–æ—Ç–æ–≤–æ", "‚úÖ"),
                ux.p("–ò—Ç–æ–≥–∏ –¥–Ω—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã! –Ø –≤—Å—ë –∑–∞–ø–æ–º–Ω–∏–ª.")
            )
        )
    
    # –°–æ–æ–±—â–µ–Ω–∏–µ B (–¥–µ–π—Å—Ç–≤–∏—è —Å –∫–Ω–æ–ø–∫–∞–º–∏)
    if isinstance(message_or_callback, Message):
        await message_or_callback.answer(
            ux.compose(
                ux.h1("–ß—Ç–æ –¥–∞–ª—å—à–µ?", "üåô"),
                ux.p("–û—Ç–ª–∏—á–Ω–∞—è —Ä–∞–±–æ—Ç–∞! –ß—Ç–æ –ø–ª–∞–Ω–∏—Ä—É–µ—à—å –¥–∞–ª—å—à–µ?")
            ),
            reply_markup=kb_post_flow()
        )
    else:
        await message_or_callback.message.answer(
            ux.compose(
                ux.h1("–ß—Ç–æ –¥–∞–ª—å—à–µ?", "üåô"),
                ux.p("–û—Ç–ª–∏—á–Ω–∞—è —Ä–∞–±–æ—Ç–∞! –ß—Ç–æ –ø–ª–∞–Ω–∏—Ä—É–µ—à—å –¥–∞–ª—å—à–µ?")
            ),
            reply_markup=kb_post_flow()
        )
    
    await state.clear()