"""–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥—ã /start."""
from aiogram import Router, F
from aiogram.types import Message
from aiogram.fsm.context import FSMContext

from ..states import Profile
from ..storage import db, User
from ..texts import texts
from ..keyboards import kb_profile_q1, get_main_menu
from ..logger import get_logger
from datetime import datetime, timedelta
from ..services import ux

logger = get_logger("start")
router = Router()


@router.message(F.text == "/start")
async def cmd_start(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start."""
    user_id = message.from_user.id
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –±–∞–∑–µ
    user = await db.get_user(user_id)
    
    if user is None:
        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        new_user = User(
            tg_id=user_id,
            created_at=datetime.now(),
            plan_tier="free",
            trial_until=datetime.now() + timedelta(days=5)  # 5-–¥–Ω–µ–≤–Ω—ã–π trial
        )
        await db.upsert_user(new_user)
        logger.info(f"New user created: {user_id}")
        
        # –ù–∞—á–∏–Ω–∞–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è
        # await message.answer_sticker(texts.STICKER_WELCOME)  # –í—Ä–µ–º–µ–Ω–Ω–æ –æ—Ç–∫–ª—é—á–µ–Ω–æ
        await message.answer(
            ux.compose(
                ux.h1("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!", "üß†"),
                ux.p("–Ø ‚Äî —Ç–≤–æ–π –õ–∏—á–Ω—ã–π –ú–æ–∑–≥! –ü–æ–º–æ–≥—É –ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å –¥–µ–Ω—å, —Ñ–æ–∫—É—Å–∏—Ä–æ–≤–∞—Ç—å—Å—è –∏ —Ä–∞—Å—Ç–∏."),
                ux.block("–ù–∞—á–Ω—ë–º —Å –∫–æ—Ä–æ—Ç–∫–æ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è?", ["–°–æ–∑–¥–∞–¥–∏–º —Ç–≤–æ–π –ø—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–π –ø–æ—Ä—Ç—Ä–µ—Ç", "–≠—Ç–æ –∑–∞–π–º—ë—Ç –≤—Å–µ–≥–æ 2 –º–∏–Ω—É—Ç—ã"], "‚ú®")
            )
        )
        
        await message.answer(
            ux.compose(
                ux.h1("–ü—Ä–æ—Ñ–∏–ª—å", "üìù"),
                ux.p(texts.PROFILE_START)
            )
        )
        await message.answer(
            ux.compose(
                ux.h1("–ü—Ä–æ—Ñ–∏–ª—å", "üìù"),
                ux.p(texts.PROFILE_Q1)
            ),
            reply_markup=kb_profile_q1()
        )
        await state.set_state(Profile.q1)
    else:
        # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        return_pretty = ux.compose(
            ux.h1("–ü—Ä–∏–≤–µ—Ç! –†–∞–¥ –≤–∏–¥–µ—Ç—å —Ç–µ–±—è —Å–Ω–æ–≤–∞!", "üéâ"),
            ux.p("–¢–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å –≥–æ—Ç–æ–≤, –≤—Å–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–æ—Å—Ç—É–ø–Ω—ã!"),
            ux.block("–ß—Ç–æ –±—É–¥–µ–º –¥–µ–ª–∞—Ç—å?", ["–ü–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å –¥–µ–Ω—å", "–§–æ–∫—É—Å–∏—Ä–æ–≤–∞—Ç—å—Å—è", "–û—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å"], "üöÄ")
        )
        
        await message.answer(return_pretty, reply_markup=get_main_menu())
        await state.clear()


@router.message(Profile.q1, F.text == texts.BUTTON_YES)
async def start_profile(message: Message, state: FSMContext):
    """–ù–∞—á–∏–Ω–∞–µ—Ç —Å–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è."""
    await message.answer(
        texts.PROFILE_START,
        reply_markup=None
    )
    await message.answer(
        "1. –ö–∞–∫ –±—ã –≤—ã –æ–ø–∏—Å–∞–ª–∏ —Å–≤–æ–π —Ö–∞—Ä–∞–∫—Ç–µ—Ä?",
        reply_markup=None
    )
    await state.set_state(Profile.q1)


@router.message(Profile.q1, F.text == texts.BUTTON_NO)
async def skip_profile(message: Message, state: FSMContext):
    """–ü—Ä–æ–ø—É—Å–∫–∞–µ—Ç —Å–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è."""
    await message.answer(
        "–•–æ—Ä–æ—à–æ, –ø—Ä–æ—Ñ–∏–ª—å –º–æ–∂–Ω–æ –±—É–¥–µ—Ç —Å–æ–∑–¥–∞—Ç—å –ø–æ–∑–∂–µ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö.",
        reply_markup=get_main_menu()
    )
    await state.clear()


@router.message(Profile.q1)
async def process_q1(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—Ç–≤–µ—Ç –Ω–∞ –≤–æ–ø—Ä–æ—Å 1."""
    await state.update_data(q1=message.text)
    await message.answer("2. –ß—Ç–æ –≤–∞—Å –±–æ–ª—å—à–µ –≤—Å–µ–≥–æ –º–æ—Ç–∏–≤–∏—Ä—É–µ—Ç?")
    await state.set_state(Profile.q2)


@router.message(Profile.q2)
async def process_q2(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—Ç–≤–µ—Ç –Ω–∞ –≤–æ–ø—Ä–æ—Å 2."""
    await state.update_data(q2=message.text)
    await message.answer("3. –ö–∞–∫ –≤—ã –ø—Ä–µ–¥–ø–æ—á–∏—Ç–∞–µ—Ç–µ —Ä–∞–±–æ—Ç–∞—Ç—å?")
    await state.set_state(Profile.q3)


@router.message(Profile.q3)
async def process_q3(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—Ç–≤–µ—Ç –Ω–∞ –≤–æ–ø—Ä–æ—Å 3."""
    await state.update_data(q3=message.text)
    await message.answer("4. –ß—Ç–æ –¥–ª—è –≤–∞—Å –æ–∑–Ω–∞—á–∞–µ—Ç —É—Å–ø–µ—Ö?")
    await state.set_state(Profile.q4)


@router.message(Profile.q4)
async def process_q4(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—Ç–≤–µ—Ç –Ω–∞ –≤–æ–ø—Ä–æ—Å 4."""
    await state.update_data(q4=message.text)
    await message.answer("5. –ö–∞–∫ –≤—ã —Å–ø—Ä–∞–≤–ª—è–µ—Ç–µ—Å—å —Å–æ —Å—Ç—Ä–µ—Å—Å–æ–º?")
    await state.set_state(Profile.q5)


@router.message(Profile.q5)
async def process_q5(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—Ç–≤–µ—Ç –Ω–∞ –≤–æ–ø—Ä–æ—Å 5."""
    await state.update_data(q5=message.text)
    await message.answer("6. –ß—Ç–æ –≤–∞—Å –±–æ–ª—å—à–µ –≤—Å–µ–≥–æ –±–µ—Å–ø–æ–∫–æ–∏—Ç?")
    await state.set_state(Profile.q6)


@router.message(Profile.q6)
async def process_q6(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—Ç–≤–µ—Ç –Ω–∞ –≤–æ–ø—Ä–æ—Å 6."""
    await state.update_data(q6=message.text)
    await message.answer("7. –ö–∞–∫ –≤—ã –ø—Ä–µ–¥–ø–æ—á–∏—Ç–∞–µ—Ç–µ –æ–±—â–∞—Ç—å—Å—è?")
    await state.set_state(Profile.q7)


@router.message(Profile.q7)
async def process_q7(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—Ç–≤–µ—Ç –Ω–∞ –≤–æ–ø—Ä–æ—Å 7."""
    await state.update_data(q7=message.text)
    await message.answer("8. –ß—Ç–æ –¥–ª—è –≤–∞—Å –≤–∞–∂–Ω–æ –≤ –æ—Ç–Ω–æ—à–µ–Ω–∏—è—Ö?")
    await state.set_state(Profile.q8)


@router.message(Profile.q8)
async def process_q8(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—Ç–≤–µ—Ç –Ω–∞ –≤–æ–ø—Ä–æ—Å 8."""
    await state.update_data(q8=message.text)
    await message.answer("9. –ö–∞–∫ –≤—ã –ø—Ä–∏–Ω–∏–º–∞–µ—Ç–µ —Ä–µ—à–µ–Ω–∏—è?")
    await state.set_state(Profile.q9)


@router.message(Profile.q9)
async def process_q9(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—Ç–≤–µ—Ç –Ω–∞ –≤–æ–ø—Ä–æ—Å 9."""
    await state.update_data(q9=message.text)
    await message.answer("10. –ß—Ç–æ –≤—ã —Ö–æ—Ç–µ–ª–∏ –±—ã –∏–∑–º–µ–Ω–∏—Ç—å –≤ —Å–µ–±–µ?")
    await state.set_state(Profile.q10)


@router.message(Profile.q10)
async def process_q10(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—Ç–≤–µ—Ç –Ω–∞ –≤–æ–ø—Ä–æ—Å 10 –∏ –∑–∞–≤–µ—Ä—à–∞–µ—Ç –ø—Ä–æ—Ñ–∏–ª—å."""
    await state.update_data(q10=message.text)
    
    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –æ—Ç–≤–µ—Ç—ã
    data = await state.get_data()
    
    # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ—Ñ–∏–ª—å —á–µ—Ä–µ–∑ GPT
    from ..services.gpt import gpt_service
    profile = await gpt_service.build_profile(data)
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–æ—Ñ–∏–ª—å –≤ –±–∞–∑—É
    import json
    await db._connection.execute("""
        INSERT OR REPLACE INTO profiles (tg_id, data)
        VALUES (?, ?)
    """, (message.from_user.id, json.dumps(profile)))
    await db._connection.commit()
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫—Ä–∞—Ç–∫–∏–π –ø–æ—Ä—Ç—Ä–µ—Ç
    from ..services import ux
    
    profile_parts = [
        f"üë§ –¢–∏–ø: {profile.get('personality_type', '–ù–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω')}",
        f"üí™ –°–∏–ª—å–Ω—ã–µ —Å—Ç–æ—Ä–æ–Ω—ã: {', '.join(profile.get('strengths', []))}",
        f"üéØ –û–±–ª–∞—Å—Ç–∏ —Ä–æ—Å—Ç–∞: {', '.join(profile.get('growth_areas', []))}",
        f"üí¨ –°—Ç–∏–ª—å –æ–±—â–µ–Ω–∏—è: {profile.get('communication_style', '–ù–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω')}",
        f"üöÄ –ú–æ—Ç–∏–≤–∞—Ü–∏—è: {', '.join(profile.get('motivation_factors', []))}"
    ]
    
    profile_pretty = ux.compose(
        ux.h1("–¢–≤–æ–π –ø—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–π –ø–æ—Ä—Ç—Ä–µ—Ç", "üß†"),
        ux.block("–ê–Ω–∞–ª–∏–∑ –ª–∏—á–Ω–æ—Å—Ç–∏", profile_parts, "üìä"),
        ux.hr(),
        ux.p("–û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å —è –∑–Ω–∞—é, –∫–∞–∫ –ª—É—á—à–µ —Ç–µ–±–µ –ø–æ–º–æ—á—å. –ù–∞—á–Ω—ë–º —Ä–∞–±–æ—Ç—É! üöÄ")
    )
    
    await message.answer(profile_pretty, reply_markup=get_main_menu())
    
    await state.clear()
    logger.info(f"Profile completed for user {message.from_user.id}")
