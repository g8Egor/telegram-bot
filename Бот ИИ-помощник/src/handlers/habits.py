"""–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –ø—Ä–∏–≤—ã—á–µ–∫."""
from aiogram import Router, F
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.fsm.context import FSMContext

from ..states import Habits
from ..texts import texts
from ..keyboards import get_habits_keyboard, get_main_menu, get_cancel_keyboard, kb_post_flow
from ..storage import db
from ..services import ux, flow
from ..logger import get_logger

logger = get_logger("habits")
router = Router()


@router.message(F.text == texts.BUTTON_HABITS)
async def cmd_habits(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–ü—Ä–∏–≤—ã—á–∫–∏'."""
    user_id = message.from_user.id
    
    # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–∏–≤—ã—á–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    async with db._connection.execute("""
        SELECT name, streak FROM habits WHERE tg_id = ? ORDER BY streak DESC
    """, (user_id,)) as cursor:
        habits = await cursor.fetchall()
    
    if not habits:
        await message.answer(
            ux.compose(
                ux.h1("–ü—Ä–∏–≤—ã—á–∫–∏", "üî•"),
                ux.p("–£ —Ç–µ–±—è –ø–æ–∫–∞ –Ω–µ—Ç –ø—Ä–∏–≤—ã—á–µ–∫. –î–∞–≤–∞–π –¥–æ–±–∞–≤–∏–º –ø–µ—Ä–≤—É—é!")
            ),
            reply_markup=InlineKeyboardMarkup(
                inline_keyboard=[
                    [InlineKeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –ø—Ä–∏–≤—ã—á–∫—É", callback_data="habit:add")]
                ]
            )
        )
    else:
        habits_text = "\n".join([f"‚Ä¢ {h[0]} ({h[1]} –¥–Ω–µ–π)" for h in habits])
        await message.answer(
            ux.compose(
                ux.h1("–¢–≤–æ–∏ –ø—Ä–∏–≤—ã—á–∫–∏", "üî•"),
                ux.p(habits_text)
            ),
            reply_markup=InlineKeyboardMarkup(
                inline_keyboard=[
                    [InlineKeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å", callback_data="habit:add")],
                    [InlineKeyboardButton(text="‚úÖ –û—Ç–º–µ—Ç–∏—Ç—å", callback_data="habit:tick")],
                    [InlineKeyboardButton(text="‚úèÔ∏è –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞—Ç—å", callback_data="habit:rename")],
                    [InlineKeyboardButton(text="üóë –£–¥–∞–ª–∏—Ç—å", callback_data="habit:delete")]
                ]
            )
        )


@router.callback_query(F.data == "habit:add")
async def process_habit_add_callback(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø—Ä–∏–≤—ã—á–∫–∏."""
    user_id = callback.from_user.id
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç –ø—Ä–∏–≤—ã—á–µ–∫ –¥–ª—è Free –ø–ª–∞–Ω–∞
    user = await db.get_user(user_id)
    if user and user.plan_tier == "free":
        # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–∏–≤—ã—á–µ–∫
        async with db._connection.execute("""
            SELECT COUNT(*) FROM habits WHERE tg_id = ?
        """, (user_id,)) as cursor:
            count = await cursor.fetchone()
            if count[0] >= 2:
                await callback.message.edit_text(
                    ux.compose(
                        ux.h1("–õ–∏–º–∏—Ç –ø—Ä–∏–≤—ã—á–µ–∫", "üî•"),
                        ux.p("–ù–∞ –±–µ—Å–ø–ª–∞—Ç–Ω–æ–º —Ç–∞—Ä–∏—Ñ–µ –º–æ–∂–Ω–æ —Å–æ–∑–¥–∞—Ç—å —Ç–æ–ª—å–∫–æ 2 –ø—Ä–∏–≤—ã—á–∫–∏."),
                        ux.p("–û–±–Ω–æ–≤–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É –¥–ª—è –±–æ–ª—å—à–µ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ø—Ä–∏–≤—ã—á–µ–∫.")
                    )
                )
                await callback.answer()
                return
    
    await callback.message.edit_text(
        ux.compose(
            ux.h1("–î–æ–±–∞–≤–∏—Ç—å –ø—Ä–∏–≤—ã—á–∫—É", "‚ûï"),
            ux.p("–ö–∞–∫—É—é –ø—Ä–∏–≤—ã—á–∫—É —Ö–æ—á–µ—à—å —Ä–∞–∑–≤–∏–≤–∞—Ç—å?")
        )
    )
    await state.set_state(Habits.add)
    await callback.answer()


@router.message(Habits.add)
async def process_add_habit(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–∏–≤—ã—á–∫–∏."""
    user_id = message.from_user.id
    habit_name = message.text.strip()
    
    if not habit_name:
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–∏–≤—ã—á–∫–∏:")
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç –ø—Ä–∏–≤—ã—á–µ–∫ –¥–ª—è Free –ø–ª–∞–Ω–∞
    user = await db.get_user(user_id)
    if user and user.plan_tier == "free":
        # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–∏–≤—ã—á–µ–∫
        async with db._connection.execute("""
            SELECT COUNT(*) FROM habits WHERE tg_id = ?
        """, (user_id,)) as cursor:
            count = await cursor.fetchone()
            if count[0] >= 2:
                await message.answer(
                    ux.compose(
                        ux.h1("–õ–∏–º–∏—Ç –ø—Ä–∏–≤—ã—á–µ–∫", "üî•"),
                        ux.p("–ù–∞ –±–µ—Å–ø–ª–∞—Ç–Ω–æ–º —Ç–∞—Ä–∏—Ñ–µ –º–æ–∂–Ω–æ —Å–æ–∑–¥–∞—Ç—å —Ç–æ–ª—å–∫–æ 2 –ø—Ä–∏–≤—ã—á–∫–∏."),
                        ux.p("–û–±–Ω–æ–≤–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É –¥–ª—è –±–æ–ª—å—à–µ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ø—Ä–∏–≤—ã—á–µ–∫.")
                    )
                )
                await state.clear()
                return
    
    # –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–∏–≤—ã—á–∫—É
    await db.tick_habit(user_id, habit_name)
    
    # –§–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    await message.answer(
        ux.compose(
            ux.h1("–ì–æ—Ç–æ–≤–æ", "‚úÖ"),
            ux.p(f"–ü—Ä–∏–≤—ã—á–∫–∞ '{habit_name}' –¥–æ–±–∞–≤–ª–µ–Ω–∞! –Ø –≤—Å—ë –∑–∞–ø–æ–º–Ω–∏–ª.")
        )
    )
    await state.clear()


@router.callback_query(F.data == "habit:tick")
async def process_habit_tick_callback(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–º–µ—Ç–∫–∏ –ø—Ä–∏–≤—ã—á–∫–∏."""
    user_id = callback.from_user.id
    
    # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–∏–≤—ã—á–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    async with db._connection.execute("""
        SELECT name, streak FROM habits WHERE tg_id = ? ORDER BY streak DESC
    """, (user_id,)) as cursor:
        habits = await cursor.fetchall()
    
    if not habits:
        await callback.message.edit_text(
            ux.compose(
                ux.h1("–ù–µ—Ç –ø—Ä–∏–≤—ã—á–µ–∫", "üî•"),
                ux.p("–£ —Ç–µ–±—è –ø–æ–∫–∞ –Ω–µ—Ç –ø—Ä–∏–≤—ã—á–µ–∫ –¥–ª—è –æ—Ç–º–µ—Ç–∫–∏.")
            )
        )
        await callback.answer()
        return
    
    # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞ –ø—Ä–∏–≤—ã—á–∫–∏
    buttons = []
    for i, (name, streak) in enumerate(habits):
        buttons.append([InlineKeyboardButton(
            text=f"{name} ({streak} –¥–Ω–µ–π)", 
            callback_data=f"habit:tick:{i}"
        )])
    
    await callback.message.edit_text(
        ux.compose(
            ux.h1("–û—Ç–º–µ—Ç–∏—Ç—å –ø—Ä–∏–≤—ã—á–∫—É", "‚úÖ"),
            ux.p("–ö–∞–∫—É—é –ø—Ä–∏–≤—ã—á–∫—É –≤—ã–ø–æ–ª–Ω–∏–ª?")
        ),
        reply_markup=InlineKeyboardMarkup(inline_keyboard=buttons)
    )
    await callback.answer()


@router.callback_query(F.data.startswith("habit:tick:"))
async def process_habit_tick_select(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –ø—Ä–∏–≤—ã—á–∫–∏ –¥–ª—è –æ—Ç–º–µ—Ç–∫–∏."""
    user_id = callback.from_user.id
    habit_idx = int(callback.data.split(":")[2])
    
    # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–∏–≤—ã—á–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    async with db._connection.execute("""
        SELECT name, streak FROM habits WHERE tg_id = ? ORDER BY streak DESC
    """, (user_id,)) as cursor:
        habits = await cursor.fetchall()
    
    if habit_idx < len(habits):
        habit_name = habits[habit_idx][0]
        new_streak = await db.tick_habit(user_id, habit_name)
        
        # –§–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        await callback.message.edit_text(
            ux.compose(
                ux.h1("–ì–æ—Ç–æ–≤–æ", "‚úÖ"),
                ux.p(f"–ü—Ä–∏–≤—ã—á–∫–∞ '{habit_name}' –æ—Ç–º–µ—á–µ–Ω–∞! Streak: {new_streak} –¥–Ω–µ–π.")
            )
        )
    
    await callback.answer()


@router.callback_query(F.data == "habit:rename")
async def process_habit_rename_callback(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏—è –ø—Ä–∏–≤—ã—á–∫–∏."""
    user_id = callback.from_user.id
    
    # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–∏–≤—ã—á–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    async with db._connection.execute("""
        SELECT name, streak FROM habits WHERE tg_id = ? ORDER BY streak DESC
    """, (user_id,)) as cursor:
        habits = await cursor.fetchall()
    
    if not habits:
        await callback.message.edit_text(
            ux.compose(
                ux.h1("–ù–µ—Ç –ø—Ä–∏–≤—ã—á–µ–∫", "üî•"),
                ux.p("–£ —Ç–µ–±—è –ø–æ–∫–∞ –Ω–µ—Ç –ø—Ä–∏–≤—ã—á–µ–∫ –¥–ª—è –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏—è.")
            )
        )
        await callback.answer()
        return
    
    # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞ –ø—Ä–∏–≤—ã—á–∫–∏
    buttons = []
    for i, (name, streak) in enumerate(habits):
        buttons.append([InlineKeyboardButton(
            text=f"{name} ({streak} –¥–Ω–µ–π)", 
            callback_data=f"habit:rename:{i}"
        )])
    
    await callback.message.edit_text(
        ux.compose(
            ux.h1("–ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞—Ç—å –ø—Ä–∏–≤—ã—á–∫—É", "‚úèÔ∏è"),
            ux.p("–ö–∞–∫—É—é –ø—Ä–∏–≤—ã—á–∫—É —Ö–æ—á–µ—à—å –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞—Ç—å?")
        ),
        reply_markup=InlineKeyboardMarkup(inline_keyboard=buttons)
    )
    await callback.answer()


@router.callback_query(F.data.startswith("habit:rename:"))
async def process_habit_rename_select(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –ø—Ä–∏–≤—ã—á–∫–∏ –¥–ª—è –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏—è."""
    user_id = callback.from_user.id
    habit_idx = int(callback.data.split(":")[2])
    
    # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–∏–≤—ã—á–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    async with db._connection.execute("""
        SELECT name, streak FROM habits WHERE tg_id = ? ORDER BY streak DESC
    """, (user_id,)) as cursor:
        habits = await cursor.fetchall()
    
    if habit_idx < len(habits):
        old_name = habits[habit_idx][0]
        await state.update_data(old_habit_name=old_name)
        await state.set_state(Habits.rename)
        
        await callback.message.edit_text(
            ux.compose(
                ux.h1("–ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞—Ç—å –ø—Ä–∏–≤—ã—á–∫—É", "‚úèÔ∏è"),
                ux.p(f"–¢–µ–∫—É—â–µ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ: {old_name}"),
                ux.p("–í–≤–µ–¥–∏ –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ:")
            )
        )
    
    await callback.answer()


@router.message(Habits.rename)
async def process_habit_rename_text(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –≤–≤–æ–¥–∞ –Ω–æ–≤–æ–≥–æ –Ω–∞–∑–≤–∞–Ω–∏—è –ø—Ä–∏–≤—ã—á–∫–∏."""
    user_id = message.from_user.id
    new_name = message.text.strip()
    data = await state.get_data()
    old_name = data.get('old_habit_name')
    
    if not new_name:
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–∏–≤—ã—á–∫–∏:")
        return
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –≤ –ë–î
    async with db._connection.execute("""
        UPDATE habits SET name = ? WHERE tg_id = ? AND name = ?
    """, (new_name, user_id, old_name)):
        pass
    
    # –°–æ–æ–±—â–µ–Ω–∏–µ –ê (—Ñ–∏–Ω–∞–ª –±–µ–∑ –∫–Ω–æ–ø–æ–∫)
    await message.answer(
        ux.compose(
            ux.h1("–ì–æ—Ç–æ–≤–æ", "‚úÖ"),
            ux.p(f"–ü—Ä–∏–≤—ã—á–∫–∞ –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∞: '{old_name}' ‚Üí '{new_name}'.")
        )
    )
    
    await state.clear()


@router.callback_query(F.data == "habit:delete")
async def process_habit_delete_callback(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –ø—Ä–∏–≤—ã—á–∫–∏."""
    user_id = callback.from_user.id
    
    # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–∏–≤—ã—á–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    async with db._connection.execute("""
        SELECT name, streak FROM habits WHERE tg_id = ? ORDER BY streak DESC
    """, (user_id,)) as cursor:
        habits = await cursor.fetchall()
    
    if not habits:
        await callback.message.edit_text(
            ux.compose(
                ux.h1("–ù–µ—Ç –ø—Ä–∏–≤—ã—á–µ–∫", "üî•"),
                ux.p("–£ —Ç–µ–±—è –ø–æ–∫–∞ –Ω–µ—Ç –ø—Ä–∏–≤—ã—á–µ–∫ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.")
            )
        )
        await callback.answer()
        return
    
    # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞ –ø—Ä–∏–≤—ã—á–∫–∏
    buttons = []
    for i, (name, streak) in enumerate(habits):
        buttons.append([InlineKeyboardButton(
            text=f"{name} ({streak} –¥–Ω–µ–π)", 
            callback_data=f"habit:delete:{i}"
        )])
    
    await callback.message.edit_text(
        ux.compose(
            ux.h1("–£–¥–∞–ª–∏—Ç—å –ø—Ä–∏–≤—ã—á–∫—É", "üóë"),
            ux.p("–ö–∞–∫—É—é –ø—Ä–∏–≤—ã—á–∫—É —Ö–æ—á–µ—à—å —É–¥–∞–ª–∏—Ç—å?")
        ),
        reply_markup=InlineKeyboardMarkup(inline_keyboard=buttons)
    )
    await callback.answer()


@router.callback_query(F.data.startswith("habit:delete:"))
async def process_habit_delete_select(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –ø—Ä–∏–≤—ã—á–∫–∏ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è."""
    user_id = callback.from_user.id
    habit_idx = int(callback.data.split(":")[2])
    
    # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–∏–≤—ã—á–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    async with db._connection.execute("""
        SELECT name, streak FROM habits WHERE tg_id = ? ORDER BY streak DESC
    """, (user_id,)) as cursor:
        habits = await cursor.fetchall()
    
    if habit_idx < len(habits):
        habit_name = habits[habit_idx][0]
        
        # –£–¥–∞–ª—è–µ–º –ø—Ä–∏–≤—ã—á–∫—É –∏–∑ –ë–î
        async with db._connection.execute("""
            DELETE FROM habits WHERE tg_id = ? AND name = ?
        """, (user_id, habit_name)):
            pass
        
        # –°–æ–æ–±—â–µ–Ω–∏–µ –ê (—Ñ–∏–Ω–∞–ª –±–µ–∑ –∫–Ω–æ–ø–æ–∫)
        await callback.message.edit_text(
            ux.compose(
                ux.h1("–ì–æ—Ç–æ–≤–æ", "‚úÖ"),
                ux.p(f"–ü—Ä–∏–≤—ã—á–∫–∞ '{habit_name}' —É–¥–∞–ª–µ–Ω–∞.")
            )
        )
        
    
    await callback.answer()