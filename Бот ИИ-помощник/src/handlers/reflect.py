"""–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–∏–∞–ª–æ–≥–∞ —Å —Ü–∏—Ñ—Ä–æ–≤—ã–º –Ø."""
from aiogram import Router, F
from aiogram.types import Message, CallbackQuery
from aiogram.fsm.context import FSMContext

from ..states import Reflect
from ..texts import texts
from ..keyboards import kb_reflect_topics, kb_reflect_actions, kb_post_flow, get_main_menu
from ..storage import db
from ..services.gpt import gpt_service
from ..services.memories import memory_service
from ..services import ux, flow
from ..logger import get_logger

logger = get_logger("reflect")
router = Router()


@router.message(F.text.in_({"üß© –¶–∏—Ñ—Ä–æ–≤–æ–µ –Ø", "/reflect"}))
async def reflect_start(msg: Message, state: FSMContext):
    """–ù–∞—á–∞–ª–æ –¥–∏–∞–ª–æ–≥–∞ —Å —Ü–∏—Ñ—Ä–æ–≤—ã–º –Ø."""
    # –£–±–∏—Ä–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –¥–æ—Å—Ç—É–ø–∞ - —Ñ—É–Ω–∫—Ü–∏—è –¥–æ—Å—Ç—É–ø–Ω–∞ –≤—Å–µ–º
    
    await state.set_state(Reflect.topic)
    await msg.answer(
        ux.compose(
            ux.h1("–¶–∏—Ñ—Ä–æ–≤–æ–µ –Ø", "üß©"),
            ux.p("–û —á—ë–º –ø–æ–≥–æ–≤–æ—Ä–∏–º?")
        ),
        reply_markup=kb_reflect_topics()
    )


@router.callback_query(F.data.startswith("reflect:topic:"))
async def process_topic_selection(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Ç–µ–º—ã."""
    topic_idx = callback.data.split(":")[2]
    
    if topic_idx == "custom":
        await state.set_state(Reflect.prompt)
        await callback.message.edit_text(
            ux.compose(
                ux.h1("–¶–∏—Ñ—Ä–æ–≤–æ–µ –Ø", "üß©"),
                ux.p("–ù–∞–ø–∏—à–∏ —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å:")
            )
        )
        await callback.answer()
        return
    
    # –í—ã–±–∏—Ä–∞–µ–º –∏–∑ –ø—Ä–µ—Å–µ—Ç–æ–≤
    topic = texts.REFLECT_TOPICS[int(topic_idx)]
    await state.update_data(topic=topic)
    await state.set_state(Reflect.prompt)
    
    await callback.message.edit_text(
        ux.compose(
            ux.h1("–¶–∏—Ñ—Ä–æ–≤–æ–µ –Ø", "üß©"),
            ux.p(f"–¢–µ–º–∞: {topic}"),
            ux.p("–ó–∞–¥–∞–π —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å:")
        )
    )
    await callback.answer()


@router.message(Reflect.prompt)
async def process_reflect_prompt(msg: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–æ–ø—Ä–æ—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    question = msg.text.strip()
    data = await state.get_data()
    topic = data.get('topic', '–û–±—â–∏–π –≤–æ–ø—Ä–æ—Å')
    
    # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –µ–≥–æ –ø–µ—Ä—Å–æ–Ω—É
    user = await db.get_user(msg.from_user.id)
    if not user:
        await msg.answer(texts.ERROR_NOT_FOUND)
        return
    
    # –ü–æ–ª—É—á–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –∏–∑ –ø–∞–º—è—Ç–∏
    memories = await memory_service.get_recent_memories(msg.from_user.id, 5)
    
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç —á–µ—Ä–µ–∑ GPT
    response = await gpt_service.reflect_dialog(
        user_prompt=question,
        profile=user.profile_data or {},
        persona=user.persona or "–î—Ä—É–∂–µ–ª—é–±–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫",
        memories=memories,
        mood_snapshot={"energy": 5, "mood": 5}  # –ó–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    )
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—Ç–≤–µ—Ç
    await msg.answer(
        ux.compose(
            ux.h1("–û—Ç–≤–µ—Ç —Ü–∏—Ñ—Ä–æ–≤–æ–≥–æ –Ø", "ü§ñ"),
            ux.block("–†–∞–∑–º—ã—à–ª–µ–Ω–∏–µ", response.split("\n"), "üí≠")
        ),
        reply_markup=kb_reflect_actions()
    )


@router.callback_query(F.data == "reflect:clarify")
async def process_clarify(callback: CallbackQuery, state: FSMContext):
    """–£—Ç–æ—á–Ω–µ–Ω–∏–µ –≤–æ–ø—Ä–æ—Å–∞."""
    await callback.message.edit_text(
        ux.compose(
            ux.h1("–¶–∏—Ñ—Ä–æ–≤–æ–µ –Ø", "üß©"),
            ux.p("–ó–∞–¥–∞–π —É—Ç–æ—á–Ω—è—é—â–∏–π –≤–æ–ø—Ä–æ—Å:")
        )
    )
    await callback.answer()


@router.callback_query(F.data == "reflect:save")
async def process_save_insight(callback: CallbackQuery, state: FSMContext):
    """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏–Ω—Å–∞–π—Ç–∞."""
    # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π –æ—Ç–≤–µ—Ç –∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
    # –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –Ω—É–∂–Ω–æ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –æ—Ç–≤–µ—Ç –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    insight = "–í–∞–∂–Ω—ã–π –∏–Ω—Å–∞–π—Ç –∏–∑ –¥–∏–∞–ª–æ–≥–∞"
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ø–∞–º—è—Ç—å
    await memory_service.add_memory(
        callback.from_user.id,
        "reflect",
        insight
    )
    
    await callback.message.edit_text(
        ux.compose(
            ux.h1("–ò–Ω—Å–∞–π—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω", "üìå"),
            ux.p("–Ø –∑–∞–ø–æ–º–Ω–∏–ª —ç—Ç–æ—Ç –≤–∞–∂–Ω—ã–π –º–æ–º–µ–Ω—Ç –¥–ª—è –±—É–¥—É—â–∏—Ö —Ä–∞–∑–≥–æ–≤–æ—Ä–æ–≤.")
        ),
        reply_markup=kb_post_flow()
    )
    await callback.answer()
    await state.clear()


@router.callback_query(F.data == "nav:menu")
async def process_back_to_menu(callback: CallbackQuery, state: FSMContext):
    """–í–æ–∑–≤—Ä–∞—Ç –≤ –º–µ–Ω—é."""
    await callback.message.edit_text(
        ux.compose(
            ux.h1("–¶–∏—Ñ—Ä–æ–≤–æ–µ –Ø", "üß©"),
            ux.p("–î–æ —Å–≤–∏–¥–∞–Ω–∏—è! –í–æ–∑–≤—Ä–∞—â–∞–π—Å—è, –∫–æ–≥–¥–∞ –∑–∞—Ö–æ—á–µ—à—å –ø–æ–≥–æ–≤–æ—Ä–∏—Ç—å.")
        ),
        reply_markup=None
    )
    await callback.answer()
    await state.clear()


# –£–¥–∞–ª–µ–Ω –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥ /–≤—ã—Ö–æ–¥ –∏ /–º–µ–Ω—é - –æ–Ω–∏ –±–æ–ª—å—à–µ –Ω–µ –Ω—É–∂–Ω—ã