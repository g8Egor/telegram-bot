"""–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è."""
from aiogram import Router, F
from aiogram.types import Message, CallbackQuery
from aiogram.fsm.context import FSMContext

from ..states import Profile
from ..texts import texts
from ..keyboards import (
    kb_profile_q1, kb_profile_q2, kb_profile_q3, kb_profile_q4, kb_profile_q5,
    kb_profile_q6, kb_profile_q7, kb_profile_q8, kb_profile_q9, kb_profile_q10,
    kb_profile_persona, kb_post_flow, get_main_menu
)
from ..storage import db
from ..services.gpt import gpt_service
from ..services import ux, flow
from ..logger import get_logger

logger = get_logger("profile")
router = Router()


@router.message(Profile.q1)
async def process_q1(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—Ç–≤–µ—Ç –Ω–∞ –≤–æ–ø—Ä–æ—Å 1."""
    await state.update_data(q1=message.text)
    await message.answer(
        ux.compose(
            ux.h1("–ü—Ä–æ—Ñ–∏–ª—å", "üìù"),
            ux.p(texts.PROFILE_Q2)
        ),
        reply_markup=kb_profile_q2()
    )
    await state.set_state(Profile.q2)


@router.callback_query(F.data.startswith("profile:q1:"))
async def process_q1_callback(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –≤–æ–ø—Ä–æ—Å 1."""
    idx = int(callback.data.split(":")[2])
    answer = texts.PROFILE_A1[idx]
    await state.update_data(q1=answer)
    
    await callback.message.edit_text(
        ux.compose(
            ux.h1("–ü—Ä–æ—Ñ–∏–ª—å", "üìù"),
            ux.p(texts.PROFILE_Q2)
        ),
        reply_markup=kb_profile_q2()
    )
    await callback.answer()


@router.message(Profile.q2)
async def process_q2(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—Ç–≤–µ—Ç –Ω–∞ –≤–æ–ø—Ä–æ—Å 2."""
    await state.update_data(q2=message.text)
    await message.answer(
        ux.compose(
            ux.h1("–ü—Ä–æ—Ñ–∏–ª—å", "üìù"),
            ux.p(texts.PROFILE_Q3)
        ),
        reply_markup=kb_profile_q3()
    )
    await state.set_state(Profile.q3)


@router.callback_query(F.data.startswith("profile:q2:"))
async def process_q2_callback(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –≤–æ–ø—Ä–æ—Å 2."""
    idx = int(callback.data.split(":")[2])
    answer = texts.PROFILE_A2[idx]
    await state.update_data(q2=answer)
    
    await callback.message.edit_text(
        ux.compose(
            ux.h1("–ü—Ä–æ—Ñ–∏–ª—å", "üìù"),
            ux.p(texts.PROFILE_Q3)
        ),
        reply_markup=kb_profile_q3()
    )
    await callback.answer()


@router.message(Profile.q3)
async def process_q3(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—Ç–≤–µ—Ç –Ω–∞ –≤–æ–ø—Ä–æ—Å 3."""
    await state.update_data(q3=message.text)
    await message.answer(
        ux.compose(
            ux.h1("–ü—Ä–æ—Ñ–∏–ª—å", "üìù"),
            ux.p(texts.PROFILE_Q4)
        ),
        reply_markup=kb_profile_q4()
    )
    await state.set_state(Profile.q4)


@router.callback_query(F.data.startswith("profile:q3:"))
async def process_q3_callback(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –≤–æ–ø—Ä–æ—Å 3."""
    idx = int(callback.data.split(":")[2])
    answer = texts.PROFILE_A3[idx]
    await state.update_data(q3=answer)
    
    await callback.message.edit_text(
        ux.compose(
            ux.h1("–ü—Ä–æ—Ñ–∏–ª—å", "üìù"),
            ux.p(texts.PROFILE_Q4)
        ),
        reply_markup=kb_profile_q4()
    )
    await callback.answer()


@router.message(Profile.q4)
async def process_q4(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—Ç–≤–µ—Ç –Ω–∞ –≤–æ–ø—Ä–æ—Å 4."""
    await state.update_data(q4=message.text)
    await message.answer(
        ux.compose(
            ux.h1("–ü—Ä–æ—Ñ–∏–ª—å", "üìù"),
            ux.p(texts.PROFILE_Q5)
        ),
        reply_markup=kb_profile_q5()
    )
    await state.set_state(Profile.q5)


@router.callback_query(F.data.startswith("profile:q4:"))
async def process_q4_callback(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –≤–æ–ø—Ä–æ—Å 4."""
    idx = int(callback.data.split(":")[2])
    answer = texts.PROFILE_A4[idx]
    await state.update_data(q4=answer)
    
    await callback.message.edit_text(
        ux.compose(
            ux.h1("–ü—Ä–æ—Ñ–∏–ª—å", "üìù"),
            ux.p(texts.PROFILE_Q5)
        ),
        reply_markup=kb_profile_q5()
    )
    await callback.answer()


@router.message(Profile.q5)
async def process_q5(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—Ç–≤–µ—Ç –Ω–∞ –≤–æ–ø—Ä–æ—Å 5."""
    await state.update_data(q5=message.text)
    await message.answer(
        ux.compose(
            ux.h1("–ü—Ä–æ—Ñ–∏–ª—å", "üìù"),
            ux.p(texts.PROFILE_Q6)
        ),
        reply_markup=kb_profile_q6()
    )
    await state.set_state(Profile.q6)


@router.callback_query(F.data.startswith("profile:q5:"))
async def process_q5_callback(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –≤–æ–ø—Ä–æ—Å 5."""
    idx = int(callback.data.split(":")[2])
    answer = texts.PROFILE_A5[idx]
    await state.update_data(q5=answer)
    
    await callback.message.edit_text(
        ux.compose(
            ux.h1("–ü—Ä–æ—Ñ–∏–ª—å", "üìù"),
            ux.p(texts.PROFILE_Q6)
        ),
        reply_markup=kb_profile_q6()
    )
    await callback.answer()


@router.message(Profile.q6)
async def process_q6(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—Ç–≤–µ—Ç –Ω–∞ –≤–æ–ø—Ä–æ—Å 6."""
    await state.update_data(q6=message.text)
    await message.answer(
        ux.compose(
            ux.h1("–ü—Ä–æ—Ñ–∏–ª—å", "üìù"),
            ux.p(texts.PROFILE_Q7)
        ),
        reply_markup=kb_profile_q7()
    )
    await state.set_state(Profile.q7)


@router.callback_query(F.data.startswith("profile:q6:"))
async def process_q6_callback(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –≤–æ–ø—Ä–æ—Å 6."""
    idx = int(callback.data.split(":")[2])
    answer = texts.PROFILE_A6[idx]
    await state.update_data(q6=answer)
    
    await callback.message.edit_text(
        ux.compose(
            ux.h1("–ü—Ä–æ—Ñ–∏–ª—å", "üìù"),
            ux.p(texts.PROFILE_Q7)
        ),
        reply_markup=kb_profile_q7()
    )
    await callback.answer()


@router.message(Profile.q7)
async def process_q7(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—Ç–≤–µ—Ç –Ω–∞ –≤–æ–ø—Ä–æ—Å 7."""
    await state.update_data(q7=message.text)
    await message.answer(
        ux.compose(
            ux.h1("–ü—Ä–æ—Ñ–∏–ª—å", "üìù"),
            ux.p(texts.PROFILE_Q8)
        ),
        reply_markup=kb_profile_q8()
    )
    await state.set_state(Profile.q8)


@router.callback_query(F.data.startswith("profile:q7:"))
async def process_q7_callback(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –≤–æ–ø—Ä–æ—Å 7."""
    idx = int(callback.data.split(":")[2])
    answer = texts.PROFILE_A7[idx]
    await state.update_data(q7=answer)
    
    await callback.message.edit_text(
        ux.compose(
            ux.h1("–ü—Ä–æ—Ñ–∏–ª—å", "üìù"),
            ux.p(texts.PROFILE_Q8)
        ),
        reply_markup=kb_profile_q8()
    )
    await callback.answer()


@router.message(Profile.q8)
async def process_q8(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—Ç–≤–µ—Ç –Ω–∞ –≤–æ–ø—Ä–æ—Å 8."""
    await state.update_data(q8=message.text)
    await message.answer(
        ux.compose(
            ux.h1("–ü—Ä–æ—Ñ–∏–ª—å", "üìù"),
            ux.p(texts.PROFILE_Q9)
        ),
        reply_markup=kb_profile_q9()
    )
    await state.set_state(Profile.q9)


@router.callback_query(F.data.startswith("profile:q8:"))
async def process_q8_callback(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –≤–æ–ø—Ä–æ—Å 8."""
    idx = int(callback.data.split(":")[2])
    answer = texts.PROFILE_A8[idx]
    await state.update_data(q8=answer)
    
    await callback.message.edit_text(
        ux.compose(
            ux.h1("–ü—Ä–æ—Ñ–∏–ª—å", "üìù"),
            ux.p(texts.PROFILE_Q9)
        ),
        reply_markup=kb_profile_q9()
    )
    await callback.answer()


@router.message(Profile.q9)
async def process_q9(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—Ç–≤–µ—Ç –Ω–∞ –≤–æ–ø—Ä–æ—Å 9."""
    await state.update_data(q9=message.text)
    await message.answer(
        ux.compose(
            ux.h1("–ü—Ä–æ—Ñ–∏–ª—å", "üìù"),
            ux.p(texts.PROFILE_Q10)
        ),
        reply_markup=kb_profile_q10()
    )
    await state.set_state(Profile.q10)


@router.callback_query(F.data.startswith("profile:q9:"))
async def process_q9_callback(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –≤–æ–ø—Ä–æ—Å 9."""
    idx = int(callback.data.split(":")[2])
    answer = texts.PROFILE_A9[idx]
    await state.update_data(q9=answer)
    
    await callback.message.edit_text(
        ux.compose(
            ux.h1("–ü—Ä–æ—Ñ–∏–ª—å", "üìù"),
            ux.p(texts.PROFILE_Q10)
        ),
        reply_markup=kb_profile_q10()
    )
    await callback.answer()


@router.message(Profile.q10)
async def process_q10(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—Ç–≤–µ—Ç –Ω–∞ –≤–æ–ø—Ä–æ—Å 10."""
    await state.update_data(q10=message.text)
    await message.answer(
        ux.compose(
            ux.h1("–ü—Ä–æ—Ñ–∏–ª—å", "üìù"),
            ux.p("–í—ã–±–µ—Ä–∏ —Å–≤–æ—é –ø–µ—Ä—Å–æ–Ω—É:")
        ),
        reply_markup=kb_profile_persona()
    )
    await state.set_state(Profile.persona)


@router.callback_query(F.data.startswith("profile:q10:"))
async def process_q10_callback(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –≤–æ–ø—Ä–æ—Å 10."""
    idx = int(callback.data.split(":")[2])
    answer = texts.PROFILE_A10[idx]
    await state.update_data(q10=answer)
    
    await callback.message.edit_text(
        ux.compose(
            ux.h1("–ü—Ä–æ—Ñ–∏–ª—å", "üìù"),
            ux.p("–í—ã–±–µ—Ä–∏ —Å–≤–æ—é –ø–µ—Ä—Å–æ–Ω—É:")
        ),
        reply_markup=kb_profile_persona()
    )
    await callback.answer()


@router.callback_query(F.data.startswith("profile:persona:"))
async def process_persona(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä –ø–µ—Ä—Å–æ–Ω—ã."""
    persona = callback.data.split(":")[2]
    await state.update_data(persona=persona)
    
    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –æ—Ç–≤–µ—Ç—ã
    data = await state.get_data()
    answers = [data.get(f'q{i}') for i in range(1, 11)]
    
    try:
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø—Ä–æ—Ñ–∏–ª—å —á–µ—Ä–µ–∑ GPT
        profile_data = await gpt_service.build_profile(answers)
        
        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ —á–∏—Ç–∞–µ–º—ã–π —Ç–µ–∫—Å—Ç
        profile_text = f"""üß† –ü—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–π –ø–æ—Ä—Ç—Ä–µ—Ç:

üë§ –¢–∏–ø –ª–∏—á–Ω–æ—Å—Ç–∏: {profile_data.get('personality_type', '–ê–¥–∞–ø—Ç–∏–≤–Ω—ã–π')}

üìù –î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑:
{profile_data.get('detailed_analysis', '–ê–Ω–∞–ª–∏–∑ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω')}

üí™ –°–∏–ª—å–Ω—ã–µ —Å—Ç–æ—Ä–æ–Ω—ã:
{chr(10).join('‚Ä¢ ' + strength for strength in profile_data.get('strengths', []))}

üéØ –û–±–ª–∞—Å—Ç–∏ –¥–ª—è —Ä–∞–∑–≤–∏—Ç–∏—è:
{chr(10).join('‚Ä¢ ' + area for area in profile_data.get('growth_areas', []))}

üí¨ –°—Ç–∏–ª—å –æ–±—â–µ–Ω–∏—è: {profile_data.get('communication_style', '–î—Ä—É–∂–µ–ª—é–±–Ω—ã–π')}

üöÄ –§–∞–∫—Ç–æ—Ä—ã –º–æ—Ç–∏–≤–∞—Ü–∏–∏:
{chr(10).join('‚Ä¢ ' + factor for factor in profile_data.get('motivation_factors', []))}

üí° –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π —Å–æ–≤–µ—Ç:
{profile_data.get('personal_advice', '–°–æ–≤–µ—Ç –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω')}"""
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–æ—Ñ–∏–ª—å –≤ –±–∞–∑—É
        await db.save_profile(callback.from_user.id, profile_text)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –ø–µ—Ä—Å–æ–Ω—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        await db.update_user_persona(callback.from_user.id, persona)
        
        logger.info(f"Profile created successfully for user {callback.from_user.id}")
    except Exception as e:
        logger.error(f"Error creating profile: {e}")
        profile_text = "–ü—Ä–æ—Ñ–∏–ª—å —Å–æ–∑–¥–∞–Ω, –Ω–æ –∞–Ω–∞–ª–∏–∑ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω."
        await db.save_profile(callback.from_user.id, profile_text)
        await db.update_user_persona(callback.from_user.id, persona)
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    await callback.message.edit_text(
        ux.compose(
            ux.h1("–ü—Ä–æ—Ñ–∏–ª—å —Å–æ–∑–¥–∞–Ω!", "‚úÖ"),
            ux.p("–ö—Ä–∞—Ç–∫–∏–π –ø–æ—Ä—Ç—Ä–µ—Ç:"),
            ux.block("–ê–Ω–∞–ª–∏–∑", profile_text.split("\n"), "üß†")
        ),
        reply_markup=None
    )
    
    # –î–æ–±–∞–≤–ª—è–µ–º finish-–∫–∞—Ä—Ç–æ—á–∫—É
    await callback.message.answer(
        flow.finish_card(
            title=texts.FLOW_DONE_TITLE,
            intro="–¢–µ–ø–µ—Ä—å —è –∑–Ω–∞—é —Ç–µ–±—è –ª—É—á—à–µ –∏ —Å–º–æ–≥—É –¥–∞–≤–∞—Ç—å –±–æ–ª–µ–µ —Ç–æ—á–Ω—ã–µ —Å–æ–≤–µ—Ç—ã.",
            tips=["–ù–∞—á–Ω–∏ —Å —É—Ç—Ä–µ–Ω–Ω–µ–≥–æ –æ–ø—Ä–æ—Å–∞", "–ü–æ–ø—Ä–æ–±—É–π —Ñ–æ–∫—É—Å-—Å–µ—Å—Å–∏—é", "–í–µ—Ä–Ω–∏—Å—å –≤ –º–µ–Ω—é"],
            footer="–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –õ–∏—á–Ω—ã–π –ú–æ–∑–≥!"
        ),
        reply_markup=kb_post_flow()
    )
    
    await state.clear()
    await callback.answer()
    logger.info(f"Profile created for user {callback.from_user.id}")
