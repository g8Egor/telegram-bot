"""–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –≤–æ–∑–¥–µ—Ä–∂–∞–Ω–∏—è."""
from aiogram import Router, F
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.fsm.context import FSMContext
from datetime import datetime, timedelta

from ..states import Abstinence
from ..texts import texts
from ..keyboards import get_main_menu, kb_post_flow
from ..storage import db
from ..services import ux, flow
from ..logger import get_logger

logger = get_logger("abstinence")
router = Router()


@router.message(F.text == texts.BUTTON_ABSTINENCE)
async def cmd_abstinence(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–í–æ–∑–¥–µ—Ä–∂–∞–Ω–∏–µ'."""
    user_id = message.from_user.id
    
    # –ü–æ–ª—É—á–∞–µ–º –≤–æ–∑–¥–µ—Ä–∂–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    async with db._connection.execute("""
        SELECT name, start_date, days_count FROM abstinence WHERE tg_id = ? ORDER BY days_count DESC
    """, (user_id,)) as cursor:
        abstinence_list = await cursor.fetchall()
    
    if not abstinence_list:
        await message.answer(
            ux.compose(
                ux.h1("–í–æ–∑–¥–µ—Ä–∂–∞–Ω–∏–µ", "üö´"),
                ux.p("–£ —Ç–µ–±—è –ø–æ–∫–∞ –Ω–µ—Ç –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã—Ö –≤–æ–∑–¥–µ—Ä–∂–∞–Ω–∏–π. –î–∞–≤–∞–π –¥–æ–±–∞–≤–∏–º –ø–µ—Ä–≤–æ–µ!")
            ),
            reply_markup=InlineKeyboardMarkup(
                inline_keyboard=[
                    [InlineKeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –≤–æ–∑–¥–µ—Ä–∂–∞–Ω–∏–µ", callback_data="abstinence:add")]
                ]
            )
        )
    else:
        abstinence_text = "\n".join([f"‚Ä¢ {item[0]} ({item[2]} –¥–Ω–µ–π)" for item in abstinence_list])
        await message.answer(
            ux.compose(
                ux.h1("–¢–≤–æ–∏ –≤–æ–∑–¥–µ—Ä–∂–∞–Ω–∏—è", "üö´"),
                ux.p(abstinence_text)
            ),
            reply_markup=InlineKeyboardMarkup(
                inline_keyboard=[
                    [InlineKeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å", callback_data="abstinence:add")],
                    [InlineKeyboardButton(text="üóë –£–¥–∞–ª–∏—Ç—å", callback_data="abstinence:delete")]
                ]
            )
        )


@router.callback_query(F.data == "abstinence:add")
async def process_abstinence_add_callback(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤–æ–∑–¥–µ—Ä–∂–∞–Ω–∏—è."""
    await callback.message.edit_text(
        ux.compose(
            ux.h1("–î–æ–±–∞–≤–∏—Ç—å –≤–æ–∑–¥–µ—Ä–∂–∞–Ω–∏–µ", "‚ûï"),
            ux.p("–û—Ç —á–µ–≥–æ —Ç—ã —Ö–æ—á–µ—à—å –≤–æ–∑–¥–µ—Ä–∂–∏–≤–∞—Ç—å—Å—è?")
        )
    )
    await state.set_state(Abstinence.add)
    await callback.answer()


@router.message(Abstinence.add)
async def process_add_abstinence(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤–æ–∑–¥–µ—Ä–∂–∞–Ω–∏—è."""
    user_id = message.from_user.id
    abstinence_name = message.text.strip()
    
    if not abstinence_name:
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≤–æ–∑–¥–µ—Ä–∂–∞–Ω–∏—è:")
        return
    
    # –î–æ–±–∞–≤–ª—è–µ–º –≤–æ–∑–¥–µ—Ä–∂–∞–Ω–∏–µ –≤ –ë–î
    today = datetime.now().date()
    async with db._connection.execute("""
        INSERT INTO abstinence (tg_id, name, start_date, days_count, created_at)
        VALUES (?, ?, ?, 0, ?)
    """, (user_id, abstinence_name, today, datetime.now())):
        pass
    
    # –§–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    await message.answer(
        ux.compose(
            ux.h1("–ì–æ—Ç–æ–≤–æ", "‚úÖ"),
            ux.p(f"–í–æ–∑–¥–µ—Ä–∂–∞–Ω–∏–µ '{abstinence_name}' –¥–æ–±–∞–≤–ª–µ–Ω–æ! –Ø –≤—Å—ë –∑–∞–ø–æ–º–Ω–∏–ª.")
        )
    )
    await state.clear()


@router.callback_query(F.data == "abstinence:delete")
async def process_abstinence_delete_callback(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –≤–æ–∑–¥–µ—Ä–∂–∞–Ω–∏—è."""
    user_id = callback.from_user.id
    
    # –ü–æ–ª—É—á–∞–µ–º –≤–æ–∑–¥–µ—Ä–∂–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    async with db._connection.execute("""
        SELECT name, days_count FROM abstinence WHERE tg_id = ? ORDER BY days_count DESC
    """, (user_id,)) as cursor:
        abstinence_list = await cursor.fetchall()
    
    if not abstinence_list:
        await callback.message.edit_text(
            ux.compose(
                ux.h1("–ù–µ—Ç –≤–æ–∑–¥–µ—Ä–∂–∞–Ω–∏–π", "üö´"),
                ux.p("–£ —Ç–µ–±—è –ø–æ–∫–∞ –Ω–µ—Ç –≤–æ–∑–¥–µ—Ä–∂–∞–Ω–∏–π –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.")
            )
        )
        await callback.answer()
        return
    
    # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞ –≤–æ–∑–¥–µ—Ä–∂–∞–Ω–∏—è
    buttons = []
    for i, (name, days) in enumerate(abstinence_list):
        buttons.append([InlineKeyboardButton(
            text=f"{name} ({days} –¥–Ω–µ–π)", 
            callback_data=f"abstinence:delete:{i}"
        )])
    
    await callback.message.edit_text(
        ux.compose(
            ux.h1("–£–¥–∞–ª–∏—Ç—å –≤–æ–∑–¥–µ—Ä–∂–∞–Ω–∏–µ", "üóë"),
            ux.p("–ö–∞–∫–æ–µ –≤–æ–∑–¥–µ—Ä–∂–∞–Ω–∏–µ —Ö–æ—á–µ—à—å —É–¥–∞–ª–∏—Ç—å?")
        ),
        reply_markup=InlineKeyboardMarkup(inline_keyboard=buttons)
    )
    await callback.answer()


@router.callback_query(F.data.startswith("abstinence:delete:"))
async def process_abstinence_delete_select(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –≤–æ–∑–¥–µ—Ä–∂–∞–Ω–∏—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è."""
    user_id = callback.from_user.id
    abstinence_idx = int(callback.data.split(":")[2])
    
    # –ü–æ–ª—É—á–∞–µ–º –≤–æ–∑–¥–µ—Ä–∂–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    async with db._connection.execute("""
        SELECT name, days_count FROM abstinence WHERE tg_id = ? ORDER BY days_count DESC
    """, (user_id,)) as cursor:
        abstinence_list = await cursor.fetchall()
    
    if abstinence_idx < len(abstinence_list):
        abstinence_name = abstinence_list[abstinence_idx][0]
        
        # –£–¥–∞–ª—è–µ–º –≤–æ–∑–¥–µ—Ä–∂–∞–Ω–∏–µ –∏–∑ –ë–î
        async with db._connection.execute("""
            DELETE FROM abstinence WHERE tg_id = ? AND name = ?
        """, (user_id, abstinence_name)):
            pass
        
        # –§–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        await callback.message.edit_text(
            ux.compose(
                ux.h1("–ì–æ—Ç–æ–≤–æ", "‚úÖ"),
                ux.p(f"–í–æ–∑–¥–µ—Ä–∂–∞–Ω–∏–µ '{abstinence_name}' —É–¥–∞–ª–µ–Ω–æ.")
            )
        )
    
    await callback.answer()
