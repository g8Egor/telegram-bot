"""–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —ç–∫—Å–ø–æ—Ä—Ç–∞ –¥–∞–Ω–Ω—ã—Ö."""
from aiogram import Router, F
from aiogram.types import Message, CallbackQuery
from aiogram.fsm.context import FSMContext

from ..states import Export
from ..texts import texts
from ..keyboards import kb_export, kb_post_flow, get_main_menu
from ..storage import db
from ..services import ux, flow
from ..logger import get_logger

logger = get_logger("export")
router = Router()


@router.message(F.text.in_({"üì§ –≠–∫—Å–ø–æ—Ä—Ç", "/export"}))
async def export_start(msg: Message, state: FSMContext):
    """–ù–∞—á–∞–ª–æ —ç–∫—Å–ø–æ—Ä—Ç–∞."""
    await msg.answer(
        ux.compose(
            ux.h1("–≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö", "üì§"),
            ux.p("–í—ã–±–µ—Ä–∏ —á—Ç–æ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å:")
        ),
        reply_markup=kb_export()
    )


@router.callback_query(F.data == "export:today")
async def process_export_today(callback: CallbackQuery, state: FSMContext):
    """–≠–∫—Å–ø–æ—Ä—Ç –ø–ª–∞–Ω–∞ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è."""
    user_id = callback.from_user.id
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∑–∞ —Å–µ–≥–æ–¥–Ω—è
    today_entries = await db.get_today_entries(user_id)
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ñ–∞–π–ª
    content = f"–ü–ª–∞–Ω –Ω–∞ —Å–µ–≥–æ–¥–Ω—è - {datetime.now().strftime('%Y-%m-%d')}\n\n"
    
    if today_entries:
        for entry in today_entries:
            content += f"‚Ä¢ {entry['type']}: {entry['data']}\n"
    else:
        content += "–ù–µ—Ç –∑–∞–ø–∏—Å–µ–π –∑–∞ —Å–µ–≥–æ–¥–Ω—è\n"
    
    # –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –∑–¥–µ—Å—å –±—ã —Å–æ–∑–¥–∞–≤–∞–ª—Å—è —Ñ–∞–π–ª
    # –ü–æ–∫–∞ –ø—Ä–æ—Å—Ç–æ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ
    await callback.message.edit_text(
        ux.compose(
            ux.h1("–≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö", "üì§"),
            ux.p("–§–∞–π–ª plan_today.txt –≥–æ—Ç–æ–≤!"),
            ux.block("–°–æ–¥–µ—Ä–∂–∏–º–æ–µ", content.split("\n"), "üìÑ")
        ),
        reply_markup=kb_post_flow()
    )
    await callback.answer()


@router.callback_query(F.data == "export:week")
async def process_export_week(callback: CallbackQuery, state: FSMContext):
    """–≠–∫—Å–ø–æ—Ä—Ç –ø–ª–∞–Ω–∞ –Ω–∞ –Ω–µ–¥–µ–ª—é."""
    user_id = callback.from_user.id
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∑–∞ –Ω–µ–¥–µ–ª—é
    week_entries = await db.get_week_entries(user_id)
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º ICS —Ñ–∞–π–ª
    content = f"BEGIN:VCALENDAR\nVERSION:2.0\nPRODID:-//Personal Brain//EN\n"
    content += f"BEGIN:VEVENT\n"
    content += f"DTSTART:{datetime.now().strftime('%Y%m%d')}T080000Z\n"
    content += f"DTEND:{datetime.now().strftime('%Y%m%d')}T090000Z\n"
    content += f"SUMMARY:–ü–ª–∞–Ω –Ω–∞ –Ω–µ–¥–µ–ª—é\n"
    content += f"DESCRIPTION:–≠–∫—Å–ø–æ—Ä—Ç –∏–∑ –õ–∏—á–Ω–æ–≥–æ –ú–æ–∑–≥–∞\n"
    content += f"END:VEVENT\n"
    content += f"END:VCALENDAR\n"
    
    # –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –∑–¥–µ—Å—å –±—ã —Å–æ–∑–¥–∞–≤–∞–ª—Å—è —Ñ–∞–π–ª
    # –ü–æ–∫–∞ –ø—Ä–æ—Å—Ç–æ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ
    await callback.message.edit_text(
        ux.compose(
            ux.h1("–≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö", "üì§"),
            ux.p("–§–∞–π–ª week_plan.ics –≥–æ—Ç–æ–≤!"),
            ux.block("–°–æ–¥–µ—Ä–∂–∏–º–æ–µ", content.split("\n"), "üóì")
        ),
        reply_markup=kb_post_flow()
    )
    await callback.answer()


@router.message(Export.today)
async def process_export_today_custom(msg: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–∞—Å—Ç–æ–º–Ω–æ–≥–æ —ç–∫—Å–ø–æ—Ä—Ç–∞ –¥–Ω—è."""
    # –ê–Ω–∞–ª–æ–≥–∏—á–Ω–æ process_export_today
    await msg.answer(
        ux.compose(
            ux.h1("–≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö", "üì§"),
            ux.p("–§–∞–π–ª plan_today.txt –≥–æ—Ç–æ–≤!")
        ),
        reply_markup=kb_post_flow()
    )
    await state.clear()


@router.message(Export.week)
async def process_export_week_custom(msg: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–∞—Å—Ç–æ–º–Ω–æ–≥–æ —ç–∫—Å–ø–æ—Ä—Ç–∞ –Ω–µ–¥–µ–ª–∏."""
    # –ê–Ω–∞–ª–æ–≥–∏—á–Ω–æ process_export_week
    await msg.answer(
        ux.compose(
            ux.h1("–≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö", "üì§"),
            ux.p("–§–∞–π–ª week_plan.ics –≥–æ—Ç–æ–≤!")
        ),
        reply_markup=kb_post_flow()
    )
    await state.clear()
