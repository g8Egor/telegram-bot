"""–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —É—Ç—Ä–µ–Ω–Ω–µ–≥–æ –æ–ø—Ä–æ—Å–∞."""
from aiogram import Router, F
from aiogram.types import Message, CallbackQuery
from aiogram.fsm.context import FSMContext

from ..states import Morning
from ..texts import texts
from ..keyboards import get_main_menu, get_energy_keyboard, kb_morning_goal, kb_morning_tasks, kb_morning_energy, kb_post_flow
from ..storage import db
from ..services.gpt import gpt_service
from ..services.memories import memory_service
from ..services import ux, flow
from ..logger import get_logger

logger = get_logger("morning")
router = Router()


# Callback –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –∫–Ω–æ–ø–æ—á–Ω–æ–≥–æ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
@router.callback_query(F.data.startswith("morning:goal:"))
async def process_morning_goal_callback(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Ü–µ–ª–∏ —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫–∏."""
    goal_idx = callback.data.split(":")[2]
    
    if goal_idx == "custom":
        await callback.message.edit_text(
            ux.compose(
                ux.h1("–£—Ç—Ä–µ–Ω–Ω–∏–π –ø–ª–∞–Ω", "üåÖ"),
                ux.p("–ù–∞–ø–∏—à–∏ —Å–≤–æ—é —Ü–µ–ª—å –Ω–∞ —Å–µ–≥–æ–¥–Ω—è:")
            )
        )
        await state.set_state(Morning.goal_text)
    else:
        # –í—ã–±–∏—Ä–∞–µ–º –∏–∑ –ø—Ä–µ—Å–µ—Ç–æ–≤
        goal = texts.MORNING_GOAL_PRESETS[int(goal_idx)]
        await state.update_data(goal=goal)
        await callback.message.edit_text(
            ux.compose(
                ux.h1("–£—Ç—Ä–µ–Ω–Ω–∏–π –ø–ª–∞–Ω", "üåÖ"),
                ux.p("–û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏ —Ç–æ–ø-3 –∑–∞–¥–∞—á–∏:")
            ),
            reply_markup=kb_morning_tasks()
        )
        await state.set_state(Morning.top3)
    
    await callback.answer()


@router.message(Morning.goal_text)
async def process_morning_goal_text(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –≤–≤–æ–¥–∞ —Ü–µ–ª–∏."""
    await state.update_data(goal=message.text)
    await message.answer(
        ux.compose(
            ux.h1("–£—Ç—Ä–µ–Ω–Ω–∏–π –ø–ª–∞–Ω", "üåÖ"),
            ux.p("–û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏ —Ç–æ–ø-3 –∑–∞–¥–∞—á–∏:")
        ),
        reply_markup=kb_morning_tasks()
    )
    await state.set_state(Morning.top3)


@router.message(Morning.goal)
async def process_morning_goal(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≥–ª–∞–≤–Ω—É—é —Ü–µ–ª—å –¥–Ω—è."""
    await state.update_data(goal=message.text)
    await message.answer(texts.MORNING_TOP3)
    await state.set_state(Morning.top3)


# Callback –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –∑–∞–¥–∞—á
@router.callback_query(F.data.startswith("morning:task:"))
async def process_morning_task_callback(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –∑–∞–¥–∞—á —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫–∏."""
    task_idx = callback.data.split(":")[2]
    
    if task_idx == "add":
        await callback.message.edit_text(
            ux.compose(
                ux.h1("–£—Ç—Ä–µ–Ω–Ω–∏–π –ø–ª–∞–Ω", "üåÖ"),
                ux.p("–î–æ–±–∞–≤—å —Å–≤–æ–∏ –∑–∞–¥–∞—á–∏ (—á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é):")
            )
        )
        await state.set_state(Morning.top3_text)
    else:
        # –í—ã–±–∏—Ä–∞–µ–º –∏–∑ –ø—Ä–µ—Å–µ—Ç–æ–≤
        task = texts.MORNING_TASKS_PRESETS[int(task_idx)]
        await state.update_data(top3=[task])
        await callback.message.edit_text(
            ux.compose(
                ux.h1("–£—Ç—Ä–µ–Ω–Ω–∏–π –ø–ª–∞–Ω", "üåÖ"),
                ux.p("–û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å –æ—Ü–µ–Ω–∏ —Å–≤–æ—é —ç–Ω–µ—Ä–≥–∏—é:")
            ),
            reply_markup=kb_morning_energy()
        )
        await state.set_state(Morning.energy)
    
    await callback.answer()


@router.message(Morning.top3_text)
async def process_morning_top3_text(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –≤–≤–æ–¥–∞ –∑–∞–¥–∞—á."""
    priorities = [p.strip() for p in message.text.replace('\n', ',').split(',') if p.strip()]
    await state.update_data(top3=priorities[:3])
    await message.answer(
        ux.compose(
            ux.h1("–£—Ç—Ä–µ–Ω–Ω–∏–π –ø–ª–∞–Ω", "üåÖ"),
            ux.p("–û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å –æ—Ü–µ–Ω–∏ —Å–≤–æ—é —ç–Ω–µ—Ä–≥–∏—é:")
        ),
        reply_markup=kb_morning_energy()
    )
    await state.set_state(Morning.energy)


@router.message(Morning.top3)
async def process_morning_top3(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ç–æ–ø-3 –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞."""
    # –ü–∞—Ä—Å–∏–º —Å–ø–∏—Å–æ–∫ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–≤ (—Ä–∞–∑–¥–µ–ª–µ–Ω–Ω—ã—Ö –∑–∞–ø—è—Ç—ã–º–∏ –∏–ª–∏ –ø–µ—Ä–µ–Ω–æ—Å–∞–º–∏)
    priorities = [p.strip() for p in message.text.replace('\n', ',').split(',') if p.strip()]
    await state.update_data(top3=priorities[:3])  # –ë–µ—Ä–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–µ 3
    
    await message.answer(
        texts.MORNING_ENERGY,
        reply_markup=get_energy_keyboard()
    )
    await state.set_state(Morning.energy)


# Callback –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —ç–Ω–µ—Ä–≥–∏–∏
@router.callback_query(F.data.startswith("morning:energy:"))
async def process_morning_energy_callback(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —ç–Ω–µ—Ä–≥–∏–∏ —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫–∏."""
    energy = int(callback.data.split(":")[2])
    await state.update_data(energy=energy)
    
    # –ó–∞–≤–µ—Ä—à–∞–µ–º —É—Ç—Ä–µ–Ω–Ω–∏–π –æ–ø—Ä–æ—Å
    await finish_morning_flow(callback, state)
    await callback.answer()


@router.message(Morning.energy)
async def process_morning_energy(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —É—Ä–æ–≤–µ–Ω—å —ç–Ω–µ—Ä–≥–∏–∏."""
    try:
        energy = int(message.text)
        if not 1 <= energy <= 10:
            await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 10")
            return
    except ValueError:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 10")
        return
    
    await state.update_data(energy=energy)
    
    # –ó–∞–≤–µ—Ä—à–∞–µ–º —É—Ç—Ä–µ–Ω–Ω–∏–π –æ–ø—Ä–æ—Å
    await finish_morning_flow(message, state)


async def finish_morning_flow(message_or_callback, state: FSMContext):
    """–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —É—Ç—Ä–µ–Ω–Ω–µ–≥–æ –ø–æ—Ç–æ–∫–∞."""
    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ
    data = await state.get_data()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    if 'goal' not in data or 'top3' not in data:
        if isinstance(message_or_callback, Message):
            await message_or_callback.answer("–û—à–∏–±–∫–∞: –¥–∞–Ω–Ω—ã–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –ù–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ.")
        else:
            await message_or_callback.message.edit_text("–û—à–∏–±–∫–∞: –¥–∞–Ω–Ω—ã–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –ù–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ.")
        await state.clear()
        return
    
    # –ü–æ–ª—É—á–∞–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if isinstance(message_or_callback, Message):
        user_id = message_or_callback.from_user.id
    else:
        user_id = message_or_callback.from_user.id
    
    # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –µ–≥–æ –ø–µ—Ä—Å–æ–Ω—É
    user = await db.get_user(user_id)
    if not user:
        if isinstance(message_or_callback, Message):
            await message_or_callback.answer(texts.ERROR_NOT_FOUND)
        else:
            await message_or_callback.message.edit_text(texts.ERROR_NOT_FOUND)
        return
    
    # –ü–æ–ª—É—á–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –∏–∑ –ø–∞–º—è—Ç–∏
    memories = await memory_service.get_recent_memories(user_id, 3)
    
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø–ª–∞–Ω —á–µ—Ä–µ–∑ GPT
    plan = await gpt_service.plan_morning(
        goal=data['goal'],
        top3=data['top3'],
        energy=data.get('energy', 5),
        persona=user.persona,
        memories=memories
    )
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞–ø–∏—Å—å –≤ –ë–î
    await db.save_entry(
        tg_id=user_id,
        entry_type="morning",
        data={
            "goal": data['goal'],
            "top3": data['top3'],
            "energy": data.get('energy', 5)
        }
    )
    
    # –î–æ–±–∞–≤–ª—è–µ–º –≤ –ø–∞–º—è—Ç—å
    await memory_service.add_memory(
        tg_id=user_id,
        kind="morning",
        content=f"–£—Ç—Ä–µ–Ω–Ω–∏–π –ø–ª–∞–Ω: {data['goal']}, –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—ã: {', '.join(data['top3'])}"
    )
    
    # –°–æ–æ–±—â–µ–Ω–∏–µ –ê (—Ñ–∏–Ω–∞–ª –±–µ–∑ –∫–Ω–æ–ø–æ–∫)
    if isinstance(message_or_callback, Message):
        await message_or_callback.answer(
            ux.compose(
                ux.h1("–ì–æ—Ç–æ–≤–æ", "‚úÖ"),
                ux.p("–£—Ç—Ä–µ–Ω–Ω–∏–π –ø–ª–∞–Ω —Å–æ—Ö—Ä–∞–Ω–µ–Ω! –Ø –≤—Å—ë –∑–∞–ø–æ–º–Ω–∏–ª.")
            )
        )
    else:
        await message_or_callback.message.edit_text(
            ux.compose(
                ux.h1("–ì–æ—Ç–æ–≤–æ", "‚úÖ"),
                ux.p("–£—Ç—Ä–µ–Ω–Ω–∏–π –ø–ª–∞–Ω —Å–æ—Ö—Ä–∞–Ω–µ–Ω! –Ø –≤—Å—ë –∑–∞–ø–æ–º–Ω–∏–ª.")
            )
        )
    
    # –°–æ–æ–±—â–µ–Ω–∏–µ B (–¥–µ–π—Å—Ç–≤–∏—è —Å –∫–Ω–æ–ø–∫–∞–º–∏)
    if isinstance(message_or_callback, Message):
        await message_or_callback.answer(
            ux.compose(
                ux.h1("–ß—Ç–æ –¥–∞–ª—å—à–µ?", "üåÖ"),
                ux.p("–û—Ç–ª–∏—á–Ω–æ–µ –Ω–∞—á–∞–ª–æ –¥–Ω—è! –ß—Ç–æ –ø–ª–∞–Ω–∏—Ä—É–µ—à—å –¥–∞–ª—å—à–µ?")
            ),
            reply_markup=kb_post_flow()
        )
    else:
        await message_or_callback.message.answer(
            ux.compose(
                ux.h1("–ß—Ç–æ –¥–∞–ª—å—à–µ?", "üåÖ"),
                ux.p("–û—Ç–ª–∏—á–Ω–æ–µ –Ω–∞—á–∞–ª–æ –¥–Ω—è! –ß—Ç–æ –ø–ª–∞–Ω–∏—Ä—É–µ—à—å –¥–∞–ª—å—à–µ?")
            ),
            reply_markup=kb_post_flow()
        )
    
    await state.clear()