"""–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é."""
from aiogram import Router, F
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.fsm.context import FSMContext

from ..states import Morning, Evening, Focus, Habits, Mood, Reflect
from ..texts import texts
from ..keyboards import get_main_menu, kb_morning_goal, kb_evening_done
from ..services import ux
from ..storage import db
from ..logger import get_logger

logger = get_logger("menu")
router = Router()


@router.message(F.text == texts.BUTTON_DAY)
async def cmd_day(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–ú–æ–π –¥–µ–Ω—å'."""
    user_id = message.from_user.id
    logger.info(f"Day button pressed by user {user_id}")
    
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Ä–µ–º—è –∏ –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π –æ–ø—Ä–æ—Å
        from datetime import datetime
        from ..services.timeutils import time_utils
    
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —á–∞—Å–æ–≤–æ–≥–æ –ø–æ—è—Å–∞
        from ..storage import db
        user = await db.get_user(user_id)
        if not user:
            await message.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ù–∞—á–Ω–∏—Ç–µ —Å /start")
            return
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ª–æ–∫–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è
        local_time = time_utils.now_local(user.tz)
        hour = local_time.hour
        logger.info(f"User {user_id} local time: {local_time}, hour: {hour}")
        
        # –õ–æ–≥–∏–∫–∞ –≤—ã–±–æ—Ä–∞ –æ–ø—Ä–æ—Å–∞
        if 0 <= hour < 12:  # –£—Ç—Ä–æ
            await message.answer(
                ux.compose(
                    ux.h1("–ú–æ–π –¥–µ–Ω—å", "üìÖ"),
                    ux.p("–î–æ–±—Ä–æ–µ —É—Ç—Ä–æ! –ù–∞—á–Ω–µ–º —Å –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –¥–Ω—è.")
                ),
                reply_markup=kb_morning_goal()
            )
            await state.set_state(Morning.goal)
        elif 17 <= hour < 24:  # –í–µ—á–µ—Ä
            await message.answer(
                ux.compose(
                    ux.h1("–ú–æ–π –¥–µ–Ω—å", "üìÖ"),
                    ux.p("–î–æ–±—Ä—ã–π –≤–µ—á–µ—Ä! –ü–æ–¥–≤–µ–¥–µ–º –∏—Ç–æ–≥–∏ –¥–Ω—è.")
                ),
                reply_markup=kb_evening_done()
            )
            await state.set_state(Evening.done)
        else:  # –î–µ–Ω—å - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—ã–±–æ—Ä
            await message.answer(
                ux.compose(
                    ux.h1("–ú–æ–π –¥–µ–Ω—å", "üìÖ"),
                    ux.p("–ß—Ç–æ —Ö–æ—á–µ—à—å —Å–¥–µ–ª–∞—Ç—å?")
                ),
                reply_markup=InlineKeyboardMarkup(
                    inline_keyboard=[
                        [InlineKeyboardButton(text="‚òÄÔ∏è –£—Ç—Ä–µ–Ω–Ω–∏–π –æ–ø—Ä–æ—Å", callback_data="day:morning")],
                        [InlineKeyboardButton(text="üåô –í–µ—á–µ—Ä–Ω–∏–π –æ–ø—Ä–æ—Å", callback_data="day:evening")]
                    ]
                )
            )
    except Exception as e:
        logger.error(f"Error in cmd_day: {e}")
        await message.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")


@router.callback_query(F.data == "day:morning")
async def process_day_morning(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —É—Ç—Ä–µ–Ω–Ω–µ–≥–æ –æ–ø—Ä–æ—Å–∞."""
    await callback.message.edit_text(
        ux.compose(
            ux.h1("–ú–æ–π –¥–µ–Ω—å", "üìÖ"),
            ux.p("–î–æ–±—Ä–æ–µ —É—Ç—Ä–æ! –ù–∞—á–Ω–µ–º —Å –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –¥–Ω—è.")
        ),
        reply_markup=kb_morning_goal()
    )
    await state.set_state(Morning.goal)
    await callback.answer()


@router.callback_query(F.data == "day:evening")
async def process_day_evening(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –≤–µ—á–µ—Ä–Ω–µ–≥–æ –æ–ø—Ä–æ—Å–∞."""
    await callback.message.edit_text(
        ux.compose(
            ux.h1("–ú–æ–π –¥–µ–Ω—å", "üìÖ"),
            ux.p("–î–æ–±—Ä—ã–π –≤–µ—á–µ—Ä! –ü–æ–¥–≤–µ–¥–µ–º –∏—Ç–æ–≥–∏ –¥–Ω—è.")
        ),
        reply_markup=kb_evening_done()
    )
    await state.set_state(Evening.done)
    await callback.answer()


@router.message(F.text == texts.BUTTON_FOCUS)
async def cmd_focus(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–§–æ–∫—É—Å-—Å–µ—Å—Å–∏—è'."""
    from ..keyboards import get_focus_duration_keyboard
    await message.answer(
        texts.FOCUS_SELECT,
        reply_markup=get_focus_duration_keyboard()
    )
    await state.set_state(Focus.selecting)


@router.message(F.text == texts.BUTTON_HABITS)
async def cmd_habits(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–ü—Ä–∏–≤—ã—á–∫–∏'."""
    user_id = message.from_user.id
    
    # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–∏–≤—ã—á–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    async with db._connection.execute("""
        SELECT name, streak FROM habits WHERE tg_id = ? ORDER BY streak DESC
    """, (user_id,)) as cursor:
        habits = await cursor.fetchall()
    
    if not habits:
        await message.answer(
            ux.compose(
                ux.h1("–ü—Ä–∏–≤—ã—á–∫–∏", "üî•"),
                ux.p("–£ —Ç–µ–±—è –ø–æ–∫–∞ –Ω–µ—Ç –ø—Ä–∏–≤—ã—á–µ–∫. –î–∞–≤–∞–π –¥–æ–±–∞–≤–∏–º –ø–µ—Ä–≤—É—é!")
            ),
            reply_markup=InlineKeyboardMarkup(
                inline_keyboard=[
                    [InlineKeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –ø—Ä–∏–≤—ã—á–∫—É", callback_data="habit:add")]
                ]
            )
        )
    else:
        habits_text = "\n".join([f"‚Ä¢ {h[0]} ({h[1]} –¥–Ω–µ–π)" for h in habits])
        await message.answer(
            ux.compose(
                ux.h1("–¢–≤–æ–∏ –ø—Ä–∏–≤—ã—á–∫–∏", "üî•"),
                ux.p(habits_text)
            ),
            reply_markup=InlineKeyboardMarkup(
                inline_keyboard=[
                    [InlineKeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å", callback_data="habit:add")],
                    [InlineKeyboardButton(text="‚úÖ –û—Ç–º–µ—Ç–∏—Ç—å", callback_data="habit:tick")],
                    [InlineKeyboardButton(text="‚úèÔ∏è –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞—Ç—å", callback_data="habit:rename")],
                    [InlineKeyboardButton(text="üóë –£–¥–∞–ª–∏—Ç—å", callback_data="habit:delete")]
                ]
            )
        )


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è –ø–µ—Ä–µ–Ω–µ—Å–µ–Ω –≤ src/handlers/mood.py


@router.message(F.text == texts.BUTTON_REFLECT)
async def cmd_reflect(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–¶–∏—Ñ—Ä–æ–≤–æ–µ –Ø'."""
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–ø–∏—Å–∫—É –∏ –ø—Ä–æ–±–Ω—ã–π –ø–µ—Ä–∏–æ–¥
    from ..storage import db
    from datetime import datetime
    user_id = message.from_user.id
    user = await db.get_user(user_id)
    
    if not user:
        await message.answer(texts.ERROR_NOT_FOUND)
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–æ–±–Ω—ã–π –ø–µ—Ä–∏–æ–¥
    if user.trial_until and user.trial_until > datetime.now():
        # –ü—Ä–æ–±–Ω—ã–π –ø–µ—Ä–∏–æ–¥ –∞–∫—Ç–∏–≤–µ–Ω - —Ä–∞–∑—Ä–µ—à–∞–µ–º –¥–æ—Å—Ç—É–ø
        pass
    elif user.plan_tier in ["pro", "mentor", "ultimate"] and user.subscription_until and user.subscription_until > datetime.now():
        # –ê–∫—Ç–∏–≤–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞
        pass
    else:
        await message.answer(texts.PAYWALL)
        return
    
    await message.answer(
        texts.REFLECT_PROMPT,
        reply_markup=None
    )
    await state.set_state(Reflect.prompt)


@router.message(F.text == texts.BUTTON_WEEKLY)
async def cmd_weekly(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–û—Ç—á—ë—Ç –Ω–µ–¥–µ–ª–∏'."""
    from ..services.reports import report_service
    from ..storage import db
    
    user_id = message.from_user.id
    user = await db.get_user(user_id)
    
    if not user:
        await message.answer(texts.ERROR_NOT_FOUND)
        return
    
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç
    report = await report_service.generate_weekly_report(user_id, user.persona)
    
    await message.answer(
        texts.WEEKLY_REPORT.format(report=report),
        reply_markup=get_main_menu()
    )


@router.message(F.text == texts.BUTTON_ABSTINENCE)
async def cmd_abstinence(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–í–æ–∑–¥–µ—Ä–∂–∞–Ω–∏–µ'."""
    user_id = message.from_user.id
    
    # –ü–æ–ª—É—á–∞–µ–º –≤–æ–∑–¥–µ—Ä–∂–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    async with db._connection.execute("""
        SELECT name, start_date, days_count FROM abstinence WHERE tg_id = ? ORDER BY days_count DESC
    """, (user_id,)) as cursor:
        abstinence_list = await cursor.fetchall()
    
    if not abstinence_list:
        await message.answer(
            ux.compose(
                ux.h1("–í–æ–∑–¥–µ—Ä–∂–∞–Ω–∏–µ", "üö´"),
                ux.p("–£ —Ç–µ–±—è –ø–æ–∫–∞ –Ω–µ—Ç –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã—Ö –≤–æ–∑–¥–µ—Ä–∂–∞–Ω–∏–π. –î–∞–≤–∞–π –¥–æ–±–∞–≤–∏–º –ø–µ—Ä–≤–æ–µ!")
            ),
            reply_markup=InlineKeyboardMarkup(
                inline_keyboard=[
                    [InlineKeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –≤–æ–∑–¥–µ—Ä–∂–∞–Ω–∏–µ", callback_data="abstinence:add")]
                ]
            )
        )
    else:
        abstinence_text = "\n".join([f"‚Ä¢ {item[0]} ({item[2]} –¥–Ω–µ–π)" for item in abstinence_list])
        await message.answer(
            ux.compose(
                ux.h1("–¢–≤–æ–∏ –≤–æ–∑–¥–µ—Ä–∂–∞–Ω–∏—è", "üö´"),
                ux.p(abstinence_text)
            ),
            reply_markup=InlineKeyboardMarkup(
                inline_keyboard=[
                    [InlineKeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å", callback_data="abstinence:add")],
                    [InlineKeyboardButton(text="üóë –£–¥–∞–ª–∏—Ç—å", callback_data="abstinence:delete")]
                ]
            )
        )


@router.message(F.text == texts.BUTTON_SETTINGS)
async def cmd_settings(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–ù–∞—Å—Ç—Ä–æ–π–∫–∏'."""
    from ..storage import db
    user_id = message.from_user.id
    user = await db.get_user(user_id)
    
    if not user:
        await message.answer(texts.ERROR_NOT_FOUND)
        return
    
    settings_text = texts.SETTINGS_MENU.format(
        tz=user.tz,
        morning_hour=user.morning_hour,
        evening_hour=user.evening_hour,
        language=user.language,
        persona=user.persona
    )
    
    await message.answer(settings_text, reply_markup=get_main_menu())


@router.message(F.text == texts.BUTTON_BILLING)
async def cmd_billing(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–ü–æ–¥–ø–∏—Å–∫–∞' - –¥–µ–º–æ-—Ä–µ–∂–∏–º."""
    from ..services import ux
    from ..keyboards import kb_subscriptions
    
    title = ux.h1(texts.SUBSCRIBE_TITLE, "üí≥")
    intro = ux.p(texts.SUBSCRIBE_DESC)
    plans = []
    for key, meta in texts.SUBSCRIBE_PLANS.items():
        plans.append(f"{meta['name']} ‚Äî {ux.escape(meta['desc'])}")
    body = ux.block("–î–æ—Å—Ç—É–ø–Ω—ã–µ —Ç–∞—Ä–∏—Ñ—ã", plans, "üì¶")
    await message.answer(ux.compose(title, intro, body), reply_markup=kb_subscriptions())
