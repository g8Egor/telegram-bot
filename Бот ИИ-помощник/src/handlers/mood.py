"""–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è."""
from aiogram import Router, F
from aiogram.types import Message, CallbackQuery
from aiogram.fsm.context import FSMContext
from datetime import datetime

from ..states import Mood
from ..services import ux, flow
from ..keyboards import kb_post_flow, kb_cancel_reply, kb_mood_energy, kb_mood_feel, kb_mood_note, get_main_menu
from ..texts import texts
from ..storage import db
from ..logger import get_logger

logger = get_logger("mood")
router = Router()


@router.message(F.text.in_({"üòä –ù–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ", "/mood"}))
async def mood_start(msg: Message, state: FSMContext):
    """–ù–∞—á–∞–ª–æ –æ–ø—Ä–æ—Å–∞ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è."""
    await state.set_state(Mood.energy)
    # await msg.answer_sticker(texts.STICKER_ENERGY)  # –í—Ä–µ–º–µ–Ω–Ω–æ –æ—Ç–∫–ª—é—á–µ–Ω–æ
    await msg.answer(
        ux.compose(
            ux.h1("–ù–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ", "üòä"),
            ux.p(texts.MOOD_ENERGY_TITLE)
        ),
        reply_markup=kb_mood_energy()
    )


@router.callback_query(F.data.startswith("mood:energy:"))
async def process_mood_energy(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —ç–Ω–µ—Ä–≥–∏–∏."""
    energy = int(callback.data.split(":")[2])
    await state.update_data(energy=energy)
    await state.set_state(Mood.mood)
    
    await callback.message.edit_text(
        ux.compose(
            ux.h1("–ù–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ", "üòä"),
            ux.p(texts.MOOD_FEEL_TITLE)
        ),
        reply_markup=kb_mood_feel()
    )
    await callback.answer()


@router.callback_query(F.data.startswith("mood:feel:"))
async def process_mood_feel(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è."""
    mood = int(callback.data.split(":")[2])
    await state.update_data(mood=mood)
    await state.set_state(Mood.note)
    
    await callback.message.edit_text(
        ux.compose(
            ux.h1("–ù–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ", "üòä"),
            ux.p(texts.MOOD_NOTE_TITLE)
        ),
        reply_markup=kb_mood_note()
    )
    await callback.answer()


@router.callback_query(F.data == "mood:note:add")
async def process_mood_note_add(callback: CallbackQuery, state: FSMContext):
    """–ü–µ—Ä–µ—Ö–æ–¥ –∫ –≤–≤–æ–¥—É –∑–∞–º–µ—Ç–∫–∏."""
    await state.set_state(Mood.note_text)
    await callback.message.edit_text(
        ux.compose(
            ux.h1("–ù–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ", "üòä"),
            ux.p("–ù–∞–ø–∏—à–∏ –∑–∞–º–µ—Ç–∫—É –æ —Å–≤–æ—ë–º –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–∏:")
        )
    )
    await callback.answer()


@router.callback_query(F.data == "mood:note:skip")
async def process_mood_note_skip(callback: CallbackQuery, state: FSMContext):
    """–ü—Ä–æ–ø—É—Å–∫ –∑–∞–º–µ—Ç–∫–∏."""
    await save_mood_and_finish(callback, state, note="")


@router.message(Mood.note_text)
async def process_mood_note_text(msg: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–µ–¥—ë–Ω–Ω–æ–π –∑–∞–º–µ—Ç–∫–∏."""
    note = msg.text.strip()
    await save_mood_and_finish(msg, state, note=note)


async def save_mood_and_finish(message_or_callback, state: FSMContext, note: str = ""):
    """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è –∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ."""
    data = await state.get_data()
    energy = int(data.get("energy", 0))
    mood = int(data.get("mood", 0))
    
    # –ü–æ–ª—É—á–∞–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if isinstance(message_or_callback, Message):
        user_id = message_or_callback.from_user.id
    else:
        user_id = message_or_callback.from_user.id
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –±–∞–∑–µ
    user = await db.get_user(user_id)
    if not user:
        from ..storage import User
        from datetime import datetime, timedelta
        
        new_user = User(
            tg_id=user_id,
            created_at=datetime.now(),
            plan_tier="free",
            subscription_until=None,
            trial_until=datetime.now() + timedelta(days=3),
            tz="Europe/Moscow",
            morning_hour=8,
            evening_hour=20,
            language="ru",
            persona="mentor",
            ref_code=None,
            ref_count=0
        )
        await db.upsert_user(new_user)

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ
    await db.save_mood(
        tg_id=user_id,
        energy=energy,
        mood=mood,
        note=note
    )

    # –ú–∏–∫—Ä–æ-—Å–æ–≤–µ—Ç –Ω–∞ –æ—Å–Ω–æ–≤–µ –æ—Ü–µ–Ω–∫–∏
    tip_lines = []
    if energy <= 4 or mood <= 4:
        tip_lines.append("–°–¥–µ–ª–∞–π –∫–æ—Ä–æ—Ç–∫–∏–π –ø–µ—Ä–µ—Ä—ã–≤ –∏ –ø–æ–¥—ã—à–∏ 2 –º–∏–Ω—É—Ç—ã.")
    elif energy >= 8 and mood >= 8:
        tip_lines.append("–û—Ç–ª–∏—á–Ω–∞—è –¥–∏–Ω–∞–º–∏–∫–∞ ‚Äî –∏—Å–ø–æ–ª—å–∑—É–π —Ñ–æ–∫—É—Å-—Å–µ—Å—Å–∏—é 25 –º–∏–Ω—É—Ç.")
    else:
        tip_lines.append("–•–æ—Ä–æ—à–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ ‚Äî –ø—Ä–æ–¥–æ–ª–∂–∞–π –≤ —Ç–æ–º –∂–µ –¥—É—Ö–µ.")

    # –°–æ–æ–±—â–µ–Ω–∏–µ –ê (—Ñ–∏–Ω–∞–ª –±–µ–∑ –∫–Ω–æ–ø–æ–∫)
    if isinstance(message_or_callback, Message):
        await message_or_callback.answer(
            ux.compose(
                ux.h1("–ì–æ—Ç–æ–≤–æ", "‚úÖ"),
                ux.p("–ù–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ! –Ø –≤—Å—ë –∑–∞–ø–æ–º–Ω–∏–ª.")
            )
        )
    else:
        await message_or_callback.message.edit_text(
            ux.compose(
                ux.h1("–ì–æ—Ç–æ–≤–æ", "‚úÖ"),
                ux.p("–ù–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ! –Ø –≤—Å—ë –∑–∞–ø–æ–º–Ω–∏–ª.")
            )
        )
        await message_or_callback.answer()

    # –°–æ–æ–±—â–µ–Ω–∏–µ B (–¥–µ–π—Å—Ç–≤–∏—è —Å –∫–Ω–æ–ø–∫–∞–º–∏)
    if tip_lines:
        if isinstance(message_or_callback, Message):
            await message_or_callback.answer(
                ux.compose(
                    ux.h1("–°–æ–≤–µ—Ç –Ω–∞ —Å–µ–π—á–∞—Å", "üßò"),
                    ux.p("\n".join(tip_lines))
                ),
                reply_markup=kb_post_flow()
            )
        else:
            await message_or_callback.message.answer(
                ux.compose(
                    ux.h1("–°–æ–≤–µ—Ç –Ω–∞ —Å–µ–π—á–∞—Å", "üßò"),
                    ux.p("\n".join(tip_lines))
                ),
                reply_markup=kb_post_flow()
            )

    await state.clear()


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –∫–Ω–æ–ø–æ–∫ –≤ kb_post_flow
@router.callback_query(F.data == "focus:open")
async def process_focus_from_mood(callback: CallbackQuery, state: FSMContext):
    """–ü–µ—Ä–µ—Ö–æ–¥ –∫ —Ñ–æ–∫—É—Å-—Å–µ—Å—Å–∏–∏ –∏–∑ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è."""
    from .focus import focus_start
    await focus_start(callback.message, state)
    await callback.answer()


@router.callback_query(F.data == "nav:stats")
async def process_stats_from_mood(callback: CallbackQuery, state: FSMContext):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –¥–Ω—è –∏–∑ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è."""
    user_id = callback.from_user.id
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∑–∞ —Å–µ–≥–æ–¥–Ω—è
    today = datetime.now().strftime("%Y-%m-%d")
    
    # –ü–æ–ª—É—á–∞–µ–º –∑–∞–ø–∏—Å–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è
    async with db._connection.execute("""
        SELECT energy, mood, note FROM mood WHERE tg_id = ? AND date = ?
    """, (user_id, today)) as cursor:
        mood_data = await cursor.fetchone()
    
    # –ü–æ–ª—É—á–∞–µ–º —Ñ–æ–∫—É—Å-—Å–µ—Å—Å–∏–∏
    async with db._connection.execute("""
        SELECT COUNT(*), SUM(duration) FROM pomodoro 
        WHERE tg_id = ? AND DATE(started_at) = ?
    """, (user_id, today)) as cursor:
        focus_data = await cursor.fetchone()
    
    # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–∏–≤—ã—á–∫–∏
    async with db._connection.execute("""
        SELECT COUNT(*) FROM habits WHERE tg_id = ?
    """, (user_id,)) as cursor:
        habits_count = await cursor.fetchone()
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    stats_parts = []
    
    if mood_data:
        stats_parts.append(f"–≠–Ω–µ—Ä–≥–∏—è: {mood_data[0]}/10")
        stats_parts.append(f"–ù–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ: {mood_data[1]}/10")
        if mood_data[2]:
            stats_parts.append(f"–ó–∞–º–µ—Ç–∫–∞: {mood_data[2][:50]}...")
    
    if focus_data and focus_data[0] > 0:
        stats_parts.append(f"–§–æ–∫—É—Å-—Å–µ—Å—Å–∏–π: {focus_data[0]}")
        stats_parts.append(f"–í—Ä–µ–º—è —Ñ–æ–∫—É—Å–∞: {focus_data[1] or 0} –º–∏–Ω")
    
    if habits_count and habits_count[0] > 0:
        stats_parts.append(f"–ü—Ä–∏–≤—ã—á–µ–∫: {habits_count[0]}")
    
    if not stats_parts:
        stats_text = "–ü–æ–∫–∞ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –∑–∞ —Å–µ–≥–æ–¥–Ω—è"
    else:
        stats_text = "\n".join(stats_parts)
    
    await callback.message.edit_text(
        ux.compose(
            ux.h1("–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–Ω—è", "üìä"),
            ux.p(stats_text)
        ),
        reply_markup=kb_post_flow()
    )
    await callback.answer()