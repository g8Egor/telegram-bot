"""–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –±–∏–ª–ª–∏–Ω–≥–∞ (–¥–µ–º–æ-—Ä–µ–∂–∏–º)."""
from aiogram import Router, F
from aiogram.types import Message, CallbackQuery
from ..services import ux
from .. import texts
from ..keyboards import kb_subscriptions

router = Router(name=__name__)

@router.message(F.text.in_({"üí≥ –ü–æ–¥–ø–∏—Å–∫–∞", "/billing", "/subscribe"}))
async def billing_menu(msg: Message):
    title = ux.h1(texts.SUBSCRIBE_TITLE, "üí≥")
    intro = ux.p(texts.SUBSCRIBE_DESC)
    plans = []
    for key, meta in texts.SUBSCRIBE_PLANS.items():
        plans.append(f"{meta['name']} ‚Äî {ux.escape(meta['desc'])}")
    body = ux.block("–î–æ—Å—Ç—É–ø–Ω—ã–µ —Ç–∞—Ä–∏—Ñ—ã", plans, "üì¶")
    await msg.answer(ux.compose(title, intro, body), reply_markup=kb_subscriptions())

@router.message(F.text.contains("–ø–æ–¥–ø–∏—Å–∫–∞"))
async def billing_menu_alt(msg: Message):
    """–ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø–æ–¥–ø–∏—Å–∫–∏."""
    title = ux.h1(texts.SUBSCRIBE_TITLE, "üí≥")
    intro = ux.p(texts.SUBSCRIBE_DESC)
    plans = []
    for key, meta in texts.SUBSCRIBE_PLANS.items():
        plans.append(f"{meta['name']} ‚Äî {ux.escape(meta['desc'])}")
    body = ux.block("–î–æ—Å—Ç—É–ø–Ω—ã–µ —Ç–∞—Ä–∏—Ñ—ã", plans, "üì¶")
    await msg.answer(ux.compose(title, intro, body), reply_markup=kb_subscriptions())

@router.callback_query(F.data.startswith("plan:"))
async def billing_pick_plan(cb: CallbackQuery):
    # data: plan:<tier>:<period>
    _, tier, period = cb.data.split(":")
    meta = texts.SUBSCRIBE_PLANS.get(tier, {"name":"–¢–∞—Ä–∏—Ñ","desc":"","month":0,"year":0})
    
    # –ü–æ–ª—É—á–∞–µ–º —Ü–µ–Ω—É –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –ø–µ—Ä–∏–æ–¥–∞
    price = meta.get("month" if period == "month" else "year", 0)
    period_text = "–º–µ—Å—è—Ü" if period == "month" else "–≥–æ–¥"
    
    title = ux.h1(f"{meta['name']} ‚Äî {price} ‚ÇΩ / {period_text}", "üßæ")
    info = ux.p(meta["desc"])
    warn = ux.block("–°—Ç–∞—Ç—É—Å –æ–ø–ª–∞—Ç—ã", [texts.DEMO_PAYMENT_DISABLED], "‚è≥", footer=texts.DEMO_PAYMENT_HINT)
    await cb.message.answer(ux.compose(title, info, ux.hr(), warn))
    await cb.answer()