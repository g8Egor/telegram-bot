"""–ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∑–∞–¥–∞—á."""
import asyncio
from apscheduler.schedulers.asyncio import AsyncIOScheduler
from apscheduler.triggers.cron import CronTrigger
from apscheduler.triggers.date import DateTrigger
from datetime import datetime, timedelta
from typing import Dict, Any

from .storage import db
from .services.gpt import gpt_service
from .services.memories import memory_service
from .services.reports import report_service
from .services.pdf import pdf_service
from .services.timeutils import time_utils
from .logger import get_logger

logger = get_logger("scheduler")


class SchedulerService:
    """–°–µ—Ä–≤–∏—Å –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ –∑–∞–¥–∞—á."""
    
    def __init__(self):
        self.scheduler = AsyncIOScheduler()
        self.active_jobs = {}  # –•—Ä–∞–Ω–∏–ª–∏—â–µ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞—á
    
    async def start(self):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫."""
        self.scheduler.start()
        logger.info("Scheduler started")
    
    async def stop(self):
        """–û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫."""
        self.scheduler.shutdown()
        logger.info("Scheduler stopped")
    
    async def schedule_user_tasks(self, user_id: int):
        """–ü–ª–∞–Ω–∏—Ä—É–µ—Ç –∑–∞–¥–∞—á–∏ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
        user = await db.get_user(user_id)
        if not user:
            return
        
        # –£–¥–∞–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∑–∞–¥–∞—á–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        await self.unschedule_user_tasks(user_id)
        
        # –ü–ª–∞–Ω–∏—Ä—É–µ–º —É—Ç—Ä–µ–Ω–Ω–∏–π –æ–ø—Ä–æ—Å
        morning_time = time_utils.calculate_next_morning(user.tz, user.morning_hour)
        self.scheduler.add_job(
            self._send_morning_reminder,
            DateTrigger(run_date=morning_time),
            args=[user_id],
            id=f"morning_{user_id}",
            replace_existing=True
        )
        
        # –ü–ª–∞–Ω–∏—Ä—É–µ–º –≤–µ—á–µ—Ä–Ω–∏–π –æ–ø—Ä–æ—Å
        evening_time = time_utils.calculate_next_evening(user.tz, user.evening_hour)
        self.scheduler.add_job(
            self._send_evening_reminder,
            DateTrigger(run_date=evening_time),
            args=[user_id],
            id=f"evening_{user_id}",
            replace_existing=True
        )
        
        # –ü–ª–∞–Ω–∏—Ä—É–µ–º –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç
        weekly_time = time_utils.calculate_next_weekly_report(user.tz, 6, 18)
        self.scheduler.add_job(
            self._send_weekly_report,
            DateTrigger(run_date=weekly_time),
            args=[user_id],
            id=f"weekly_{user_id}",
            replace_existing=True
        )
        
        logger.info(f"Scheduled tasks for user {user_id}")
    
    async def unschedule_user_tasks(self, user_id: int):
        """–£–¥–∞–ª—è–µ—Ç –∑–∞–¥–∞—á–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
        job_ids = [f"morning_{user_id}", f"evening_{user_id}", f"weekly_{user_id}"]
        
        for job_id in job_ids:
            try:
                self.scheduler.remove_job(job_id)
            except Exception as e:
                logger.warning(f"Failed to remove job {job_id}: {e}")
        
        logger.info(f"Unscheduled tasks for user {user_id}")
    
    async def _send_morning_reminder(self, user_id: int):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É—Ç—Ä–µ–Ω–Ω–µ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ."""
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∑–∞–ø–æ–ª–Ω–µ–Ω –ª–∏ —É–∂–µ —É—Ç—Ä–µ–Ω–Ω–∏–π –æ–ø—Ä–æ—Å
            has_morning = await db.today_has(user_id, "morning")
            if has_morning:
                logger.info(f"Morning entry already exists for user {user_id}")
                return
            
            # –ü–æ–ª—É—á–∞–µ–º –±–æ—Ç–∞ –∏–∑ –≥–ª–æ–±–∞–ª—å–Ω–æ–π –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π
            try:
                from .main import bot
            except ImportError:
                # –ï—Å–ª–∏ –Ω–µ –º–æ–∂–µ–º –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å, –∏—Å–ø–æ–ª—å–∑—É–µ–º None
                bot = None
            
            if not bot:
                logger.error("Bot instance not available")
                return
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ
            await bot.send_message(
                user_id,
                "üåÖ –î–æ–±—Ä–æ–µ —É—Ç—Ä–æ! –í—Ä–µ–º—è –¥–ª—è –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –¥–Ω—è.\n\n"
                "–ù–∞–∂–º–∏—Ç–µ /start –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É '–ú–æ–π –¥–µ–Ω—å' –¥–ª—è –Ω–∞—á–∞–ª–∞ –æ–ø—Ä–æ—Å–∞."
            )
            
            logger.info(f"Morning reminder sent to user {user_id}")
            
        except Exception as e:
            logger.error(f"Morning reminder error for user {user_id}: {e}")
    
    async def _send_evening_reminder(self, user_id: int):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –≤–µ—á–µ—Ä–Ω–µ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ."""
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∑–∞–ø–æ–ª–Ω–µ–Ω –ª–∏ —É–∂–µ –≤–µ—á–µ—Ä–Ω–∏–π –æ–ø—Ä–æ—Å
            has_evening = await db.today_has(user_id, "evening")
            if has_evening:
                logger.info(f"Evening entry already exists for user {user_id}")
                return
            
            # –ü–æ–ª—É—á–∞–µ–º –±–æ—Ç–∞ –∏–∑ –≥–ª–æ–±–∞–ª—å–Ω–æ–π –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π
            try:
                from .main import bot
            except ImportError:
                # –ï—Å–ª–∏ –Ω–µ –º–æ–∂–µ–º –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å, –∏—Å–ø–æ–ª—å–∑—É–µ–º None
                bot = None
            
            if not bot:
                logger.error("Bot instance not available")
                return
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ
            await bot.send_message(
                user_id,
                "üåô –î–æ–±—Ä—ã–π –≤–µ—á–µ—Ä! –í—Ä–µ–º—è –¥–ª—è —Ä–µ—Ñ–ª–µ–∫—Å–∏–∏.\n\n"
                "–ù–∞–∂–º–∏—Ç–µ /start –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É '–ú–æ–π –¥–µ–Ω—å' –¥–ª—è –≤–µ—á–µ—Ä–Ω–µ–≥–æ –æ–ø—Ä–æ—Å–∞."
            )
            
            logger.info(f"Evening reminder sent to user {user_id}")
            
        except Exception as e:
            logger.error(f"Evening reminder error for user {user_id}: {e}")
    
    async def _send_weekly_report(self, user_id: int):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç."""
        try:
            user = await db.get_user(user_id)
            if not user:
                return
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç
            report = await report_service.generate_weekly_report(user_id, user.persona)
            
            # –ü–æ–ª—É—á–∞–µ–º –±–æ—Ç–∞ –∏–∑ –≥–ª–æ–±–∞–ª—å–Ω–æ–π –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π
            try:
                from .main import bot
            except ImportError:
                # –ï—Å–ª–∏ –Ω–µ –º–æ–∂–µ–º –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å, –∏—Å–ø–æ–ª—å–∑—É–µ–º None
                bot = None
            
            if not bot:
                logger.error("Bot instance not available")
                return
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç—á–µ—Ç
            await bot.send_message(
                user_id,
                f"üìä –í–∞—à –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç:\n\n{report}"
            )
            
            # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞ Ultimate –ø–ª–∞–Ω–µ, –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º PDF
            if user.plan_tier == "ultimate":
                try:
                    pdf_path = await pdf_service.generate_weekly_pdf(
                        user_id=user_id,
                        user_name=user.tz  # –ò—Å–ø–æ–ª—å–∑—É–µ–º tz –∫–∞–∫ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                    )
                    
                    from aiogram.types import FSInputFile
                    pdf_file = FSInputFile(pdf_path)
                    
                    await bot.send_document(
                        user_id,
                        document=pdf_file,
                        caption="üìÑ PDF –æ—Ç—á–µ—Ç –∑–∞ –Ω–µ–¥–µ–ª—é"
                    )
                    
                except Exception as e:
                    logger.error(f"PDF generation error for user {user_id}: {e}")
            
            logger.info(f"Weekly report sent to user {user_id}")
            
        except Exception as e:
            logger.error(f"Weekly report error for user {user_id}: {e}")
    
    async def schedule_habit_reminders(self, user_id: int, habit_name: str):
        """–ü–ª–∞–Ω–∏—Ä—É–µ—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ –ø—Ä–∏–≤—ã—á–∫–∞—Ö."""
        # –í —Ä–µ–∞–ª—å–Ω–æ–π —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ –∑–¥–µ—Å—å –±—ã–ª–∞ –±—ã –ª–æ–≥–∏–∫–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –æ –ø—Ä–∏–≤—ã—á–∫–∞—Ö
        # –ü–æ–∫–∞ —ç—Ç–æ –∑–∞–≥–ª—É—à–∫–∞
        pass
    
    async def schedule_focus_reminders(self, user_id: int):
        """–ü–ª–∞–Ω–∏—Ä—É–µ—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ —Ñ–æ–∫—É—Å-—Å–µ—Å—Å–∏—è—Ö."""
        # –í —Ä–µ–∞–ª—å–Ω–æ–π —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ –∑–¥–µ—Å—å –±—ã–ª–∞ –±—ã –ª–æ–≥–∏–∫–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –æ —Ñ–æ–∫—É—Å-—Å–µ—Å—Å–∏—è—Ö
        # –ü–æ–∫–∞ —ç—Ç–æ –∑–∞–≥–ª—É—à–∫–∞
        pass
    
    async def reschedule_all_users(self):
        """–ü–µ—Ä–µ–ø–ª–∞–Ω–∏—Ä—É–µ—Ç –∑–∞–¥–∞—á–∏ –¥–ª—è –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π."""
        try:
            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            async with db._connection.execute("SELECT tg_id FROM users") as cursor:
                users = await cursor.fetchall()
            
            for (user_id,) in users:
                await self.schedule_user_tasks(user_id)
            
            logger.info(f"Rescheduled tasks for {len(users)} users")
            
        except Exception as e:
            logger.error(f"Reschedule error: {e}")


# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞
scheduler_service = SchedulerService()
